FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
FStatVector <- c(FStatVector, FStat)
myNonLinearityTest(series)
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(series)
S <- seq(1,2)
myNonLinearityTest(series)
myNonLinearityTest(series, S=S)
str(FStatVector)
rownames(FStatVector)
colnames(FStatVector)
names(FStatVector)
FStatVector
S <- seq(1,4)
myNonLinearityTest(series,S=S)
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(series,S=S)
View(MEI)
rm(m,length)
rm(p)
rm(N)
rm(resid)
rm(t,z)
m.lr
m.lr$residuals
m.lr$residuals==series
mm.lr <- summary(lm(e~m1+y+irlt))
m1 <- log(MEI$M1IDX_EA)-log(MEI$M1IDX_US)
m3 <- log(MEI$M3IDX_EA)-log(MEI$M3IDX_US)
y <- log(MEI$GDPIDX_US)-log(MEI$GDPIDX_EA)
irlt <- MEI$IRLT_EA-MEI$IRLT_US
e <- log(MEI$CCUS)
mm.lr <- summary(lm(e~m1+y+irlt))
mm.lr.resid <- as.numeric(m.lr$residuals[2:length(m.lr$residuals)])
rm(m.lr, m.lr.resid, mm.lr, mm.lr.resid)
rm(d)
rm(a, agg,b)
tail(de)
de <- diff(e)
head(de)
tail(de)
modelLongRun <- summary(lm(e~m1+y+irlt))
modelLongRunResiduals <- as.numeric(modelLongRun$residuals[2:length(modelLongRun$residuals)])
rm(predictiveResiduals)
myplot(modelLongRunResiduals)
mylines(series)
myplot(e)
mylines(series)
myplot(e)
mylines(e-series)
modelLongRunResiduals <- as.numeric(modelLongRun$residuals)
mylines(modelLongRunResiduals)
myplot(e)
mylines(e-modelLongRunResiduals)
df.macro <- data.frame(e, m1, y, irlt)
model.macro <- summary(lm(e~., data=df.macro))
modelLongRunResiduals <- as.numeric(modelLongRun$residuals)
rm(residualDF, regime)
modelLongRunResiduals2 <- as.numeric(model.macro$residuals)
modelLongRunResiduals==modelLongRunResiduals2
rm(modelLongRunResiduals2)
longRunResiduals <- as.numeric(summary(lm(e~., data=df.macro))$residuals)
mylines(longRunResiduals)
mylines(e-longRunResiduals)
myplot(e)
mylines(longRunResiduals)
head(longRunResiduals)
head(series)
tail(series)
tail(longRunResiduals)
F2 <- myNonLinearityTest(longRunResiduals, S=S)
S
F1 <- myNonLinearityTest(series, S=S)
source('D:/Documents/R-Projects/TAR/mytar.R')
F1 <- myNonLinearityTest(series, S=S)
source('D:/Documents/R-Projects/TAR/mytar.R')
F1 <- myNonLinearityTest(series)
rm(regime.lm, regimelm)
rm(FStat, FStatVector)
rm(h)
rm(i)
rm(irlt, e, de, m1, m3)
rm(estimatedResiduals)
rm(m.ecm)
p <- 4
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
z <- series
data <- data.frame(z)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
i <- NULL
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
p
i
z <- series[(1+i):(length+i)]
head(z)
str(z)
str(series)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length(z)+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
i <- NULL
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
z <- series
data <- data.frame(z)
i
p
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length(z)+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
rm(i, m, N, FStatVector, z, data)
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(longRunResiduals)
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(longRunResiduals)
myNonLinearityTest(series)
series.orig <- series
series <- llongRunResiduals
series <- longRunResiduals
p <- 0
if(p==0) { # auto select lag order p
p <- round(((VARselect(series)$selection[1]+VARselect(series)$selection[3])/2), digits = 0)
}
p
p <- 0
if(p==0) { # auto select lag order p
p <- as.numeric(round(((VARselect(series)$selection[1]+VARselect(series)$selection[3])/2), digits = 0))
}
p
i <- NULL
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
m
N
z <- series
data <- data.frame(z)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
View(data)
series <- series.orig
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
N <- length(series)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length(series)+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
z <- series
data <- data.frame(z)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(length(series)+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
View(data)
S
# calculate test statistic
for (d in S) {
FStat <- NULL
FStat <- getFStat(data, m, d, p, N)
FStatVector <- c(FStatVector, FStat)
}
m
d
d <- 1
View(data)
predictiveResiduals <- NULL
resid <- NULL
h <- max(1, p+1-d)
data <- data[order(data[d+1]),] # arrange
View(data)
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
residualDF <- data.frame(predictiveResiduals,data[(m+1):nrow(data),2:(p+1)])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=residualDF))$residuals
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
FStat
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(series = )
myNonLinearityTest(series  )
myNonLinearityTest(series)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
myNonLinearityTest(modelLongRunResiduals)
source('D:/Documents/R-Projects/TAR/mytar.R')
myNonLinearityTest(modelLongRunResiduals)
longRunResiduals <- as.numeric(summary(lm(e~., data=df.macro))$residuals)
p
series <- longRunResiduals
myplot(series)
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
rm(FStat)
z <- series
length <- length(z)
data <- data.frame(z)
length
N
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
View(data)
data <- data[1:(nrow(data)-p),]
d
FStat <- NULL
predictiveResiduals <- NULL
resid <- NULL
h <- max(1, p+1-d)
data <- data[order(data[d+1]),] # arrange by threshold d, regressors stat in 2nd column, hence d+1
t
m
nrow(data)-1
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
m
428-62
myplot(predictiveResiduals)
residualDF <- data.frame(predictiveResiduals,data[(m+1):nrow(data),2:(p+1)])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=residualDF))$residuals
mylines(estimatedResiduals)
myplot(series)
View(data)
t
t <- m
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
regime.lm
regime.lm$coefficients
regime.lm$coefficients*regime[m+1,2:(p+1)]
regime.lm$coefficients*data[m+1,2:(p+1)]
regime.lm$coefficients[2:(p+1)*data[m+1,2:(p+1)]
)
regime.lm$coefficients
regime.lm$coefficients[2:(p+1)]
regime.lm$coefficients[2:(p+1)]*data[(m+1),2:(p+1)]
data[(m+1),2:(p+1)]
data[61,]
data[63,]
m
data[63,2:(p+1)]
regime.lm$coefficients[2:(p+1)]*data[63,2:(p+1)]
sum(regime.lm$coefficients[2:(p+1)]*data[63,2:(p+1)])
sum(regime.lm$coefficients[2:(p+1)]*data[m+1,2:(p+1)])
regime.lm$coefficients[1]
t
m
resid <- data[t+1,1]-sum(regime.lm$coefficients[2:(p+1)]*data[t+1,2:(p+1)])+regime.lm$coefficients[1]
resid
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
resid
regime.lm$coefficients[2:(p+1)]*data[t+1,2:(p+1)]
data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)]
resid <- data[t+1,1]-sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1]
resid
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
resid
sum(5+1)
sum(5)+1
resid <- data[t+1,1]-sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1]
resid
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
resid
a <- seq(1,4)
b <- seq(2,5)
sum(a*b)+1 == sum(a*b+1)
resid <- data[t+1,1]- sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])-regime.lm$coefficients[1]
resid
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
myplot(predictiveResiduals)
predictiveResiduals <- NULL
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
myplot(predictiveResiduals)
366+m
View(data)
residualDF <- data.frame(predictiveResiduals,data[(m+1):nrow(data),2:(p+1)])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=residualDF))$residuals
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
FStat
N
d
m
p
h
summary(lm(predictiveResiduals~., data=residualDF))
sum(predictiveResiduals^2)
sum(estimatedResiduals^2)
sum(predictiveResiduals^2)-sum(estimatedResiduals^2)
(sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/5
sum(estimatedResiduals^2)/(N-d-m-p-h)
0.0002724618/0.0007941657
((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-h))
regime.lm <- lm(z~., data = regime)
summary(regime.lm)
save.image("D:/Documents/R-Projects/TAR/backup.RData")
load("D:/Documents/R-Projects/TAR/.RData")
myNonLinearityTest(series = )
myNonLinearityTest(series)
# calculate predictive residuals with recursive LS to select optimal threshold lag d
myNonLinearityTest(series)
# p .. lag order
# d .. particular threshold lag
# S .. set of threshold lags
# k .. number of regimes
# m .. regime starting size
# see 1998 Martens et al, Appendix Step 2
myNonLinearityTest <- function(series, p=0, S=seq(1,4), k=3) {
if(p==0) { # auto select lag order p
p <- as.numeric(round(((VARselect(series)$selection[1]+VARselect(series)$selection[3])/2), digits = 0))
}
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
FStat <- NULL
z <- series
length <- length(z)
data <- data.frame(z)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
# calculate test statistic
for (d in S) {
FStat <- NULL
FStat <- getFStat(data, m, d, p, N)
FStatVector <- c(FStatVector, FStat)
}
return(as.numeric(FStatVector))
}
# calculate predictive residuals with recursive LS to select optimal threshold lag d
# data is already sorted according to threshold value (z_(t-d))
getFStat <- function(data, m, d, p, N=N) {
predictiveResiduals <- NULL
resid <- NULL
h <- max(1, p+1-d)
data <- data[order(data[d+1]),] # arrange by threshold variable with lag d, regr. start in 2nd column, hence d+1
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
residualDF <- data.frame(predictiveResiduals,data[(m+1):nrow(data),2:(p+1)])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=residualDF))$residuals
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
return(FStat)
}
# calculate m
getRegimeSize <- function(series, stationary=TRUE, verbose=FALSE){
if(stationary==TRUE) regimeSize <- round(3*sqrt(length(series)),0)
else regimeSize <- round(5*sqrt(length(series)),0)
if (verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: suggested regime size m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  suggested regime size m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(regimeSize)
}
myNonLinearityTest(series)
load("D:/Documents/R-Projects/TAR/backup.RData")
library(tsDyn)
library(vars)
m1 <- log(MEI$M1IDX_EA)-log(MEI$M1IDX_US)
m3 <- log(MEI$M3IDX_EA)-log(MEI$M3IDX_US)
y <- log(MEI$GDPIDX_US)-log(MEI$GDPIDX_EA)
irlt <- MEI$IRLT_EA-MEI$IRLT_US
e <- log(MEI$CCUS)
df.macro <- data.frame(e, m1, y, irlt)
longRunResiduals <- as.numeric(summary(lm(e~., data=df.macro))$residuals)
# modelLongRunResiduals <- as.numeric(modelLongRun$residuals[2:length(modelLongRun$residuals)])
MEI <- read.csv(data="data/all/MEI.csv", header=TRUE, sep=",", dec=",")
MEI <- read.csv(file="data/all/MEI.csv", header=TRUE, sep=",", dec=",")
m1 <- log(MEI$M1IDX_EA)-log(MEI$M1IDX_US)
m3 <- log(MEI$M3IDX_EA)-log(MEI$M3IDX_US)
y <- log(MEI$GDPIDX_US)-log(MEI$GDPIDX_EA)
irlt <- MEI$IRLT_EA-MEI$IRLT_US
e <- log(MEI$CCUS)
df.macro <- data.frame(e, m1, y, irlt)
longRunResiduals <- as.numeric(summary(lm(e~., data=df.macro))$residuals)
rm(m1,m3,y,irlt,e)
myplot <- function (x, type="l") {
plot(x, type=type, col=1)
}
mylines <- function (x, type="l") {
lines(x, type=type, col=round(runif(1,2,6),0))
}
# p .. lag order
# d .. particular threshold lag
# S .. set of threshold lags
# k .. number of regimes
# m .. regime starting size
# see 1998 Martens et al, Appendix Step 2
myNonLinearityTest <- function(series, p=0, S=seq(1,4), k=3) {
if(p==0) { # auto select lag order p
p <- as.numeric(round(((VARselect(series)$selection[1]+VARselect(series)$selection[3])/2), digits = 0))
}
m <- getRegimeSize(series)
N <- length(series)
FStatVector <- NULL
FStat <- NULL
z <- series
length <- length(z)
data <- data.frame(z)
# generate AR dataframe, cut off lost values
for(i in 1:p) {
z <- series[(1+i):(N+i)]
data <- data.frame(data,z)
}
data <- data[1:(nrow(data)-p),]
# calculate test statistic
for (d in S) {
FStat <- NULL
FStat <- getFStat(data, m, d, p, N)
FStatVector <- c(FStatVector, FStat)
}
return(as.numeric(FStatVector))
}
# calculate predictive residuals with recursive LS to select optimal threshold lag d
# data is already sorted according to threshold value (z_(t-d))
getFStat <- function(data, m, d, p, N=N) {
predictiveResiduals <- NULL
resid <- NULL
h <- max(1, p+1-d)
data <- data[order(data[d+1]),] # arrange by threshold variable with lag d, regr. start in 2nd column, hence d+1
for (t in m:(nrow(data)-1)) {
regime <- data[1:t,]
regime.lm <- lm(z~., data = regime)
resid <- data[t+1,1]-(sum(data[t+1,2:(p+1)]*regime.lm$coefficients[2:(p+1)])+regime.lm$coefficients[1])
predictiveResiduals <- as.numeric(c(predictiveResiduals,resid))
}
residualDF <- data.frame(predictiveResiduals,data[(m+1):nrow(data),2:(p+1)])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=residualDF))$residuals
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2))/(p+1))/(sum(estimatedResiduals^2)/(N-d-m-p-h))
return(FStat)
}
# calculate m
getRegimeSize <- function(series, stationary=TRUE, verbose=FALSE){
if(stationary==TRUE) regimeSize <- round(3*sqrt(length(series)),0)
else regimeSize <- round(5*sqrt(length(series)),0)
if (verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: suggested regime size m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  suggested regime size m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(regimeSize)
}
myNonLinearityTest(longRunResiduals)
myplot(longRunResiduals)
