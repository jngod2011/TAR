if(method=="MARTENS") {
# recursively calculate predictive residuals (Martens et al)
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
m
)
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
myplot(predictiveResiduals)
sum(predictiveResiduals^2)
mean(predictiveResiduals^2)
df.test <- data.frame(predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
View(df.test)
summary(lm(predictiveResiduals~., data=df.test))
lm(predictiveResiduals~., data=df.test)$residuals
mylines(lm(predictiveResiduals~., data=df.test)$residuals)
estimatedResiduals <- summary(lm(predictiveResiduals~., data=df.test))$residuals
mylines(estimatedResiduals)
sum(estimatedResiduals^2)
sum(predictiveResiduals^23)
sum(predictiveResiduals^2)
sum(predictiveResiduals^2)-sum(estimatedResiduals^2)
(sum(predictiveResiduals^2)-sum(estimatedResiduals^2))
(sum(predictiveResiduals^2)-sum(estimatedResiduals^2))*(n-d-m-p-p)
sum(estimatedResiduals^2)*5
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals)
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals)/p
p
(sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals))/p
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals^2)/p
sum(estimatedResiduals^2)
sum(estimatedResiduals^2)/(n-p-p-1)
0.2618855/0.000625
data(ice.river)
install.packages("TSDL")
library(tseries)
data(ice.river)
y1 <- flow.jok
y2 <- flow.vat
z <- temp # temperature
rm(m, N, n, numerator)
rm(predResid)
x <- prec
x <- prec[2:length(x)]
y1 <- flow.jok[1:(length(prec)-1)]
y2 <- flow.vat[1:(length(prec)-1)]
x <- prec[2:length(x)]
z <- temp[1:(length(prec)-1)] # temperature
rm(y)
y1 <- flow.jok[1:(length(flow.jok)-1)]
y2 <- flow.vat[1:(length(flow.vat)-1)]
x <- prec[2:length(prec)]
z <- temp[1:(length(temp)-1)] # temperature
myplot(y1)
myplot(y2)
myplot(x)
myplot(z)
myplot(y1)
myplot(y2)
myplot(series)
myplot(y1)
myNonLinearityTest2(y1)
myNonLinearityTest2(y2\)
myNonLinearityTest2(y2)
myNonLinearityTest2(x)
myNonLinearityTest2(z)
myNonLinearityTest2(series)
rm(x,y1,y2,z)
y <- series
rm(prec,ice.river, flow.jok, flow.vat)
rm(random)
rm(obs)
rm(temp)
rm(denominator)
N <- as.numeric(length(y))
if(p==0) {
p <- as.numeric(round(((VARselect(y)$selection[1]+VARselect(y)$selection[3])/2), digits = 0))
}
df.y <- getAR(y)
d
df.z <- df.y[ order( df.y[,(d+1)] ), ]
View(df.z)
n <- as.numeric(nrow(df.z))
m <- getRegimeSize(df.z)
predictiveResiduals <- NULL
for (i in (m-1):(n-1)) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[2:(p+1)] * df.z[(i+1),2:(p+1)])
predictiveResiduals <- c(predictiveResiduals, predResid)
}
df.test <- data.frame(predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=df.test))$residuals
# calculate final test statistic
myplot(predictiveResiduals, name="predictiveResiduals")
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2)) / (p+1)) / (  sum(estimatedResiduals^2) / (n-d-m-p)  )
FStat
m
i
library(tsDyn)
selectSETAR(series)
selectSETAR(series, m=2)
a <- seq(1,4)
b <- seq(2,5)
a%%b
a%*%b
b
lm.regime
lm.regime$coefficients
m
lm.regime$coefficients[-1]%*%df.z[m]
lm.regime$coefficients[-1]%*%df.z[-1]
lm.regime$coefficients
lm.regime$coefficients[-1]
df.z[m,]
df.z[m,-1]
i
i <- 61
m
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% df.z[(i+1),-1]
i
df.z[(i+1),1]
lm.regime$coefficients[1]
lm.regime$coefficients[-1] %*% df.z[(i+1),-1]
lm.regime$coefficients[01]
lm.regime$coefficients[-1]
lm.regime$coefficients[-1]%*%df.z[(i+1),-1]
df.z[(i+1),-1]
df.z[(i+1),-1]%*%lm.regime$coefficients[-1]
as.numeric(df.z[(i+1),-1])%*%lm.regime$coefficients[-1]
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[-1] * df.z[(i+1),-1])
predResid
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])
predResid
str(predResid)
dim(predResid)
predResid[1]
predResid[1,1]
predResid[1,2]
predResid[,2]
predResid[,1]
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1]))
predResid
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY")
# libLoad
source('D:/Documents/R-Projects/TAR/loadLib.R')
file.edit("~/.Rprofile")
getwd()
file.edit(".Rprofile")
myNonLinearityTest2(series, method="TSAY")
myNonLinearityTest2(series, method="TSAY", S=2)
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY", S=2)
myNonLinearityTest2(series, method="TSAY", S=3)
myNonLinearityTest2(series, method="TSAY", S=1)
myplot(MEI$CCRETT01_US)
myplot(MEI$CCRETT01_US-(mean(MEI$CCRETT01_US)))
myplot(log(MEI$CCRETT01_US))
myplot(log(MEI$CCRETT01_US)-mean(log(MEI$CCRETT01_US)))
mylines(series)
myplot(series)
mylines(log(MEI$CCRETT01_US)-mean(log(MEI$CCRETT01_US)))
myplot(series)
mylines(0)
mylines(rep(0,428))
View(df.y)
View(df.z)
a
aperm(a)
a*b
a
b
?matrix
A <- matrix(a)
A
B <- matrix(b, nrow=1)
B
A*B
A%*%
)
A%*%B
A <- matrix(a)
A
A <- matrix(a, ncol=1)
A
p
A <- matrix(a, ncol=1, nrow=p)
A
V <- matrix(data=NULL, nrow=p, ncol=p)
V <- matrix(data=0, nrow=p, ncol=p)
V
X1X2 <- A%*%B
V
X1X2
V+X1X2
a
b
a%*%a
a%o%a
i
X <- df.z[i, -1]
X
X%o%X
X <- as.numeric(df.z[i, -1])
X%o%X
V <- matrix(data=0, nrow=p, ncol=p)
i
for(j in 1:i) {
X <- as.numeric(df.z[i, -1])
V <- V+X%o%X # outer product: XX'
}
V
solve(V)
X%o%X
solve(X%o%X)
V <- matrix(data=0, nrow=p, ncol=p)
n
m <- n-1
for(j in 1:i) {
X <- as.numeric(df.z[i, -1])
V <- V+X%o%X # outer product: XX'
}
V
solve(V)
a%o%a
solve(a%o%a)
X <- as.numeric(df.z[i, 2:(p+1)])
p
p <- 2
p
X <- as.numeric(df.z[i, 2:(p+1)])
p <- 1
V <- matrix(data=0, nrow=p, ncol=p)
i
V <- matrix(data=0, nrow=p, ncol=p)
for(j in 1:i) {
X <- as.numeric(df.z[i, 2:(p+1)])
V <- V+X%o%X # outer product: XX'
}
solve(V)
df.z[62,2]%*%df.z[62,2]
df.z[62,2]%*%V%*%df.z[62,2]
df.z[62,2]%*%solve(V)%*%df.z[62,2]
sqrt(df.z[62,2]%*%solve(V)%*%df.z[62,2])
1+sqrt(df.z[62,2]%*%solve(V)%*%df.z[62,2])
sqrt(1+ df.z[62,2]%*%solve(V)%*%df.z[62,2])
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")\
myNonLinearityTest2(series, p=1, method="TSAY")
myNonLinearityTest2(series, p=1, method="TSAY")\
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
i
df.z[(i+1),-1])
df.z[(i+1),-1]
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
myNonLinearityTest2(series, p=1, method="TSAY", S=4)
myNonLinearityTest2(series, p=2, method="TSAY", S=4)
df.z[1,]
df.z[1,-1]
as.numeric(df.z[1,-1])%o%as.numeric(df.z[1,-1])
solve(as.numeric(df.z[1,-1])%o%as.numeric(df.z[1,-1]))
sumOuterProduct <- function(data) {
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- data[i,]%o%data[i,]
V <- V+(X%o%X)
}
return(V)
}
sumOuterProduct(df.z[,1])
sumOuterProduct(df.z[,-1])
sumOuterProduct <- function(data) {
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- as.numeric(data[i,])%o%as.numeric(data[i,])
V <- V+(X%o%X)
}
return(V)
}
sumOuterProduct(df.z[,-1])
ncol(df.z[,-1])
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
data <- df.z[,-1]
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- as.numeric(data[i,])%o%as.numeric(data[i,])
V <- V+(X%o%X)
}
X
sumOuterProduct <- function(data) {
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- as.numeric(data[i,])
V <- V+(X%o%X)
}
return(V)
}
sumOuterProduct(df.z[,-1])
solve(sumOuterProduct(df.z[,-1]))
getSumOuterProducts <- function(data) {
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- as.numeric(data[i,])
V <- V+(X%o%X)
}
return(V)
}
rm(sumOuterProduct())
rm(sumOuterProduct
)
solve(sumOuterProduct(df.z[1:2,-1]))
solve(getSumOuterProduct(df.z[1:2,-1]))
getSumOuterProducts <- function(data) {
V <- matrix(0, nrow=ncol(data), ncol=ncol(data))
for(i in 1:nrow(data)) {
X <- as.numeric(data[i,])
V <- V+(X%o%X)
}
return(V)
}
solve(getSumOuterProducts(df.z[1:2,-1]))
solve(getSumOuterProducts(df.z[1:3,-1]))
solve(getSumOuterProducts(df.z[1:4,-1]))
solve(getSumOuterProducts(df.z[1:5,-1]))
solve(getSumOuterProducts(df.z[1:6,-1]))
solve(getSumOuterProducts(df.z[1:62,-1]))
solve(getSumOuterProducts(df.z[1:61,-1]))
solve(getSumOuterProducts(df.z[1:3,-1]))
solve(getSumOuterProducts(df.z[1:4,-1]))
solve(getSumOuterProducts(df.z[1:5,-1]))
solve(getSumOuterProducts(df.z[1:6,-1]))
solve(getSumOuterProducts(df.z[1:10,-1]))
solve(getSumOuterProducts(df.z[1:20,-1]))
solve(getSumOuterProducts(df.z[1:30,-1]))
solve(getSumOuterProducts(df.z[1:40,-1]))
solve(getSumOuterProducts(df.z[1:50,-1]))
head(df.z)
df.z[1,]
df.z[2,]
df.z[:2,]
df.z[1:2,]
df.z[62,-1]
as.numeric(df.z[62,-1])
i
m
m <- 62
i <- 61
df.regime <- df.z[1:i,]
V <- matrix(data=0, nrow=p, ncol=p)
p <- 4
V <- matrix(data=0, nrow=p, ncol=p)
V <- solve( getSumOuterProducts(df.regime[,-1]) )
V
df.z[(i+1),-1]
as.numeric(df.z[(i+1),-1])
as.numeric(df.z[(i+1),-1]) %*% V
V %*% as.numeric(df.z[(i+1),-1])
V
V <- round(V,0)
V
a
V%*%a
i
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
#predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[-1] * df.z[(i+1),-1])
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
predictiveResiduals <- NULL
eta <- NULL
predictiveResiduals <- c(predictiveResiduals, predResid)
V <- matrix(data=0, nrow=p, ncol=p)
V <- solve( getSumOuterProducts(df.regime[,-1]) )
normalizer <- sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% V %*% as.numeric(df.z[(i+1), -1]))
normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% V %*% as.numeric(df.z[(i+1), -1])))
eta <- c(eta, predResid/normalizer)
i
i <- 62
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
#predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[-1] * df.z[(i+1),-1])
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
predictiveResiduals <- c(predictiveResiduals, predResid)
V <- matrix(data=0, nrow=p, ncol=p)
V <- solve( getSumOuterProducts(df.regime[,-1]) )
normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% V %*% as.numeric(df.z[(i+1), -1])))
eta <- c(eta, predResid/normalizer)
source('D:/Documents/R-Projects/TAR/mytar2.R')
mmyNonLinearityTest2(series, method="TSAY")
myNonLinearityTest2(series, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY")
S
S <- 2
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY")
myNonLinearityTest2(series, S=2, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
myNonLinearityTest2(series, S=2, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
myNonLinearityTest2(series, S=2, method="TSAY")
eta
m
for (i in (m-1):(n-1)) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
V <- matrix(data=0, nrow=p, ncol=p)
V <- solve( getSumOuterProducts(df.regime[,-1]) )
normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% V %*% as.numeric(df.z[(i+1), -1])))
eta <- c(eta, predResid/normalizer)
}
S0 <- (1/(n-h-m) * (for i in 1:nrow(eta)) sum(eta%o%eta))
S0 <- (1/(n-h-m) * (for (i in 1:nrow(eta)) sum(eta%o%eta))
)
h
h <- p
p
S0 <- (1/(n-h-m) * (for(i in 1:nrow(eta)) sum(eta%o%eta))
)
nrow(eta)
S0 <- (1/(n-h-m) * (for(i in 1:length(eta)) sum(eta%o%eta)))
a
a*o*a
a%o%a
a
det(a)
det(a%o%a)
det(V)
V
View(df.regime)
lm.regime <- lm(z~., data=df.regime)
View(df.regime)
lm.regime <- lm(y~., data=df.regime)
summary(lm.regime)
a
b
a%*%b
crossprod(a,b)
a%o%b
2*a%o%b
det(a%o%b)
source('D:/Documents/R-Projects/TAR/mytar3.R')
myNonLinearityTest2()
myNonLinearityTest2(series, S=2, p=4, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
myNonLinearityTest2(series, S=2, p=4, method="TSAY")
y <- as.numeric(series)
N <- as.numeric(length(y))
p
df.y <- getAR(y)
StatVector <- data.frame(NULL)
d <- 1
S <- 1
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
m
m <- getRegimeSize(df.z)
n <- as.numeric(nrow(df.z))
predictiveResiduals <- NULL
eta <- NULL
for (i in (m-1):(n-1)) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
V <- matrix(data=0, nrow=p, ncol=p)
V <- solve( getSumOuterProducts(df.regime[,-1]) )
normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% V %*% as.numeric(df.z[(i+1), -1])))
eta <- c(eta, predResid/normalizer)
}
predictiveResiduals <- eta
df.test <- data.frame(predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=df.test))$residuals
myplot(predictiveResiduals, name="predictiveResiduals")
S0 <- 1/(n-h-m) * (predictiveResiduals %o% predictiveResiduals)
367^2
S1 <- 1/(n-h-m) * (estimatedResiduals %o% estimatedResiduals)
det(S0)
det(S1)
det(a%o%a)
A <- matrix(5, ncol=1, nrow=1)
det(A)
a
a[1]
a[1]%o%a[1]
S0 <- 1/(n-h-m) * sum(predictiveResiduals^2)
S1 <- 1/(n-h-m) * sum(estimatedResiduals^2)
CStat <- (n-h-m- ( (p+1)*p) + 1 ) * ( log(det(S0)) - log(det(S1)) )
CStat <- (n-h-m- ( (p+1)*p) + 1 ) * ( log(S0) - log(S1) )
myNonLinearityTest2(series, S=2, p=4, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
myNonLinearityTest2(series, S=2, p=4, method="TSAY")
myNonLinearityTest2(series, S=3, p=4, method="TSAY")
myNonLinearityTest2(series, S=4, p=4, method="TSAY")
myNonLinearityTest2(series, S=4, p=4, method="MARTENS")
myNonLinearityTest2(series, S=4, p=4, method="TSAY")
