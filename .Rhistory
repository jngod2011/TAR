}
return(data)
# return(data[(p+1):(N-p),])
}
data <- myar2(series)
View(data)
p
data[p,]
N
myar2 <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
return(data)
# return(data[(p+1):N,])
}
data <- myar2(series)
View(data)
myar2 <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
return(data)
# return(data[(p+1):N,])
}
data <- myar2(series)
data <- myar2(series, p=4)
myar2 <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
return(data[(p+1):N,])
}
data <- myar2(series)
View(data)
myar2 <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
return(data)
# return(data[(p+1):N,])
}
data <- myar2(series)
View(data)
myar2 <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
# return(data)
return(data[(p+1):N,])
}
data <- myar2(series)
View(data)
rm(myar2)
getAR <- function(y, p=0) {
N <- length(y)
z <- y
if(p==0) {
p <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
z <- c(z, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
z <- c(rep(NA,i), y, rep(NA,(p-i)))
data <- data.frame(data,z)
}
# return(data)
return(data[(p+1):N,])
}
source('d:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series)
View(data)
getAR <- function(series, p=0) {
N <- length(y)
y <- series
if(p==0) {
p <- round(((VARselect(y)$selection[1]+VARselect(y)$selection[3])/2), digits = 0)
}
y <- c(y, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
y <- c(rep(NA,i), series, rep(NA,(p-i)))
data <- data.frame(data,y)
}
# return(data)
return(data[(p+1):N,])
}
myNonLinearityTest2(series)
View(data)
lm(y~., data=data)
View(data)
data <- myar2(series)
data <- getAR(series)
View(data)
rm(data)
data <- getAR(series)
View(data)
getAR <- function(series, p=0) {
N <- length(series)
y <- series
if(p==0) {
p <- round(((VARselect(y)$selection[1]+VARselect(y)$selection[3])/2), digits = 0)
}
y <- c(y, rep(NA,p))
data <- data.frame(z)
for(i in 1:p) {
y <- c(rep(NA,i), series, rep(NA,(p-i)))
data <- data.frame(data,y)
}
# return(data)
return(data[(p+1):N,])
}
data <- getAR(series)
View(data)
getAR <- function(series, p=0) {
N <- length(series)
y <- series
if(p==0) {
p <- round(((VARselect(y)$selection[1]+VARselect(y)$selection[3])/2), digits = 0)
}
y <- c(y, rep(NA,p))
data <- data.frame(y)
for(i in 1:p) {
y <- c(rep(NA,i), series, rep(NA,(p-i)))
data <- data.frame(data,y)
}
# return(data)
return(data[(p+1):N,])
}
data <- getAR(series)
View(data)
lm(y~., data=data)
ar.ols
ar.ols(series, order.max = 4)
lm(y~., data=data)
myNonLinearityTest2(series)
myNonLinearityTest2(series, S=4)
View(data)
dataOrdered <- data[ order(data[,2]), ]
View(dataOrdered)
dataOrdered <- data[ order(data[,3]), ]
View(dataOrdered)
source('d:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, S=4)
source('d:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, S=4)
myNonLinearityTest2(series, S=4, method="TSAY")
source('d:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, S=4, method="TSAY")
FStatVector <- data.frame(NULL)
source('d:/Documents/R-Projects/TAR/mytar2.R')
FStatVector <- data.frame(NULL)
myNonLinearityTest2(series, S=4, method="TSAY")
source('d:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, S=4, method="TSAY")
df.y <- getAR(y)
View(df.y)
FStatVector <- data.frame(NULL)
d <- 1
df.z <- df.y[ order( df.y[,(d+1)] ), ]
View(df.z)
myplot(df.z[,2])
myplot(df.z[,1])
myplot(df.z[,3])
myplot(df.z[,4])
myplot(df.z[,5])
n <- as.numeric(nrow(df.z))
m <- getRegimeSize(df.z)
predictiveResiduals <- NULL
i <- m
df.regime <- df.z[1:i,]
View(df.regime)
df.regime <- as.matrix(df.z[1:i,])
View(df.regime)
df.regime <- df.z[1:i,]
myplot(df.regime[,1])
myplot(df.regime[,2])
myplot(df.regime[,3])
myplot(df.regime[,4])
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
predictiveResiduals <- NULL
predictiveResiduals <- c(as.numeric(predictiveResiduals), summary(lm(y~., data=df.regime))$residuals[i])
predictiveResiduals <- NULL
predictiveResiduals <- c(as.numeric(predictiveResiduals), as.numeric(summary(lm(y~., data=df.regime))$residuals[i]))
predictiveResiduals <- NULL
predictiveResiduals <- c(as.numeric(predictiveResiduals), summary(lm(y~., data=df.regime))$residuals[i])
predictiveResiduals <- c(as.numeric(predictiveResiduals), as.numeric(summary(lm(y~., data=df.regime))$residuals[i]))
predictiveResiduals <- NULL
predictiveResiduals <- c(as.numeric(predictiveResiduals), as.numeric(summary(lm(y~., data=df.regime))$residuals[i]))
i
i <- m+1
df.regime <- df.z[1:i,]
predictiveResiduals <- c(as.numeric(predictiveResiduals), as.numeric(summary(lm(y~., data=df.regime))$residuals[i]))
i <- m+2
df.regime <- df.z[1:i,]
predictiveResiduals <- c(as.numeric(predictiveResiduals), as.numeric(summary(lm(y~., data=df.regime))$residuals[i]))
predictiveResiduals <- NULL
if(method=="MARTENS") {
# recursively calculate predictive residuals (Martens et al)
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
m
)
for (i in m:n) {
df.regime <- df.z[1:i,]
predictiveResiduals <- c(predictiveResiduals, summary(lm(y~., data=df.regime))$residuals[i])
}
myplot(predictiveResiduals)
sum(predictiveResiduals^2)
mean(predictiveResiduals^2)
df.test <- data.frame(predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
View(df.test)
summary(lm(predictiveResiduals~., data=df.test))
lm(predictiveResiduals~., data=df.test)$residuals
mylines(lm(predictiveResiduals~., data=df.test)$residuals)
estimatedResiduals <- summary(lm(predictiveResiduals~., data=df.test))$residuals
mylines(estimatedResiduals)
sum(estimatedResiduals^2)
sum(predictiveResiduals^23)
sum(predictiveResiduals^2)
sum(predictiveResiduals^2)-sum(estimatedResiduals^2)
(sum(predictiveResiduals^2)-sum(estimatedResiduals^2))
(sum(predictiveResiduals^2)-sum(estimatedResiduals^2))*(n-d-m-p-p)
sum(estimatedResiduals^2)*5
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals)
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals)/p
p
(sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals))/p
sum((predictiveResiduals-mean(predictiveResiduals))^2) - sum(estimatedResiduals^2)/p
sum(estimatedResiduals^2)
sum(estimatedResiduals^2)/(n-p-p-1)
0.2618855/0.000625
data(ice.river)
install.packages("TSDL")
library(tseries)
data(ice.river)
y1 <- flow.jok
y2 <- flow.vat
z <- temp # temperature
rm(m, N, n, numerator)
rm(predResid)
x <- prec
x <- prec[2:length(x)]
y1 <- flow.jok[1:(length(prec)-1)]
y2 <- flow.vat[1:(length(prec)-1)]
x <- prec[2:length(x)]
z <- temp[1:(length(prec)-1)] # temperature
rm(y)
y1 <- flow.jok[1:(length(flow.jok)-1)]
y2 <- flow.vat[1:(length(flow.vat)-1)]
x <- prec[2:length(prec)]
z <- temp[1:(length(temp)-1)] # temperature
myplot(y1)
myplot(y2)
myplot(x)
myplot(z)
myplot(y1)
myplot(y2)
myplot(series)
myplot(y1)
myNonLinearityTest2(y1)
myNonLinearityTest2(y2\)
myNonLinearityTest2(y2)
myNonLinearityTest2(x)
myNonLinearityTest2(z)
myNonLinearityTest2(series)
rm(x,y1,y2,z)
y <- series
rm(prec,ice.river, flow.jok, flow.vat)
rm(random)
rm(obs)
rm(temp)
rm(denominator)
N <- as.numeric(length(y))
if(p==0) {
p <- as.numeric(round(((VARselect(y)$selection[1]+VARselect(y)$selection[3])/2), digits = 0))
}
df.y <- getAR(y)
d
df.z <- df.y[ order( df.y[,(d+1)] ), ]
View(df.z)
n <- as.numeric(nrow(df.z))
m <- getRegimeSize(df.z)
predictiveResiduals <- NULL
for (i in (m-1):(n-1)) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[2:(p+1)] * df.z[(i+1),2:(p+1)])
predictiveResiduals <- c(predictiveResiduals, predResid)
}
df.test <- data.frame(predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
estimatedResiduals <- summary(lm(predictiveResiduals~., data=df.test))$residuals
# calculate final test statistic
myplot(predictiveResiduals, name="predictiveResiduals")
FStat <- ((sum(predictiveResiduals^2)-sum(estimatedResiduals^2)) / (p+1)) / (  sum(estimatedResiduals^2) / (n-d-m-p)  )
FStat
m
i
library(tsDyn)
selectSETAR(series)
selectSETAR(series, m=2)
a <- seq(1,4)
b <- seq(2,5)
a%%b
a%*%b
b
lm.regime
lm.regime$coefficients
m
lm.regime$coefficients[-1]%*%df.z[m]
lm.regime$coefficients[-1]%*%df.z[-1]
lm.regime$coefficients
lm.regime$coefficients[-1]
df.z[m,]
df.z[m,-1]
i
i <- 61
m
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% df.z[(i+1),-1]
i
df.z[(i+1),1]
lm.regime$coefficients[1]
lm.regime$coefficients[-1] %*% df.z[(i+1),-1]
lm.regime$coefficients[01]
lm.regime$coefficients[-1]
lm.regime$coefficients[-1]%*%df.z[(i+1),-1]
df.z[(i+1),-1]
df.z[(i+1),-1]%*%lm.regime$coefficients[-1]
as.numeric(df.z[(i+1),-1])%*%lm.regime$coefficients[-1]
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - sum(lm.regime$coefficients[-1] * df.z[(i+1),-1])
predResid
predResid <- df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])
predResid
str(predResid)
dim(predResid)
predResid[1]
predResid[1,1]
predResid[1,2]
predResid[,2]
predResid[,1]
predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1]))
predResid
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY")
# libLoad
source('D:/Documents/R-Projects/TAR/loadLib.R')
file.edit("~/.Rprofile")
getwd()
file.edit(".Rprofile")
myNonLinearityTest2(series, method="TSAY")
myNonLinearityTest2(series, method="TSAY", S=2)
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, method="TSAY", S=2)
myNonLinearityTest2(series, method="TSAY", S=3)
myNonLinearityTest2(series, method="TSAY", S=1)
myplot(MEI$CCRETT01_US)
myplot(MEI$CCRETT01_US-(mean(MEI$CCRETT01_US)))
myplot(log(MEI$CCRETT01_US))
myplot(log(MEI$CCRETT01_US)-mean(log(MEI$CCRETT01_US)))
mylines(series)
myplot(series)
mylines(log(MEI$CCRETT01_US)-mean(log(MEI$CCRETT01_US)))
myplot(series)
mylines(0)
mylines(rep(0,428))
View(df.y)
View(df.z)
a
aperm(a)
a*b
a
b
?matrix
A <- matrix(a)
A
B <- matrix(b, nrow=1)
B
A*B
A%*%
)
A%*%B
A <- matrix(a)
A
A <- matrix(a, ncol=1)
A
p
A <- matrix(a, ncol=1, nrow=p)
A
V <- matrix(data=NULL, nrow=p, ncol=p)
V <- matrix(data=0, nrow=p, ncol=p)
V
X1X2 <- A%*%B
V
X1X2
V+X1X2
a
b
a%*%a
a%o%a
i
X <- df.z[i, -1]
X
X%o%X
X <- as.numeric(df.z[i, -1])
X%o%X
V <- matrix(data=0, nrow=p, ncol=p)
i
for(j in 1:i) {
X <- as.numeric(df.z[i, -1])
V <- V+X%o%X # outer product: XX'
}
V
solve(V)
X%o%X
solve(X%o%X)
V <- matrix(data=0, nrow=p, ncol=p)
n
m <- n-1
for(j in 1:i) {
X <- as.numeric(df.z[i, -1])
V <- V+X%o%X # outer product: XX'
}
V
solve(V)
a%o%a
solve(a%o%a)
X <- as.numeric(df.z[i, 2:(p+1)])
p
p <- 2
p
X <- as.numeric(df.z[i, 2:(p+1)])
p <- 1
V <- matrix(data=0, nrow=p, ncol=p)
i
V <- matrix(data=0, nrow=p, ncol=p)
for(j in 1:i) {
X <- as.numeric(df.z[i, 2:(p+1)])
V <- V+X%o%X # outer product: XX'
}
solve(V)
df.z[62,2]%*%df.z[62,2]
df.z[62,2]%*%V%*%df.z[62,2]
df.z[62,2]%*%solve(V)%*%df.z[62,2]
sqrt(df.z[62,2]%*%solve(V)%*%df.z[62,2])
1+sqrt(df.z[62,2]%*%solve(V)%*%df.z[62,2])
sqrt(1+ df.z[62,2]%*%solve(V)%*%df.z[62,2])
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")\
myNonLinearityTest2(series, p=1, method="TSAY")
myNonLinearityTest2(series, p=1, method="TSAY")\
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
i
df.z[(i+1),-1])
df.z[(i+1),-1]
source('D:/Documents/R-Projects/TAR/mytar2.R')
myNonLinearityTest2(series, p=1, method="TSAY")
myNonLinearityTest2(series, p=1, method="TSAY", S=4)
myNonLinearityTest2(series, p=2, method="TSAY", S=4)
