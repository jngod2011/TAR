}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data)
}
df1 <- mar(m.lr.resid)
tail(df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data[1:(length(z)-lags)])
}
tail(df1)
df1 <- mar(m.lr.resid)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data[1:(length(z)-lags),])
}
df1 <- mar(m.lr.resid)
tail(df1)
head(df1)
lm(z~,data=df1)
lm(z~.,data=df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# remove NA rows
data <- (data[1:(length(z)-lags),])
AR <- lm(z~., data=data)
return(AR)
}
mar(m.lr.resid)
mar(m.lr.resid, lags=2)
mar(m.lr.resid)
rm(df1)
summary(ur.df(m.lr.resid, type="drift"))
mar(m.lr.resid)
summary(mar(m.lr.resid))
summary(mar(m.lr.resid, lags=5))
thresholdLags <- seq(1:4)
source('~/R-Projects/TAR/myScripts.R')
rm(mar, mlines, mplot)
source('~/R-Projects/TAR/mytar.R')
rm(thresholdLags)
S <- seq(1:4)
test <- mytar(m.lr.resid, p=1, S=S)
source('~/R-Projects/TAR/mytar.R')
test <- mytar(m.lr.resid, p=1, S=S)
source('~/R-Projects/TAR/mytar.R')
test <- myNonLinearityTest(m.lr.resid, p=4)
View(test)
install.packages("ts")
install.packages("tsDyn")
library(tsDyn)
order(test)
order(test[,1])
View(test)
head(test)
head(order(test))
head(order(test),20)
source('~/R-Projects/TAR/mytar.R')
test <- myNonLinearityTest(m.lr.resid)
View(test)
test2 <- test[order(z),]
test2 <- test[order(test$z),]
View(test2)
View(test)
myplot(test2[1,])
myplot(test2[1,])
myplot(test2[1,])
myplot(test2[,1])
myplot(test2[,2])
myplot(test2[,1])
myplot(test[,1])
myplot(test2[,1])
myplot(test2[,1])
source('~/R-Projects/TAR/myScripts.R')
test3 <- order(m.lr.resid)
myplot(test3)
test3 <- m.lr.resid[order(m.lr.resid)]
myplot(test3)
myplot(test3)
series  <- m.lr.resid
myplot(series)
idx <- order(series)
myplot(idx)
d <- 2
seriesd <- lag(series, lag=d)
myplot(series)
mmylines(seriesd)
mylines(seriesd)
seriesd <- lag(series, d)
mylines(seriesd)
?lag
seriesd <- lag(series, k=d)
myplot(series)
mylines(seriesd)
?lag
seriesd <- diff(series,differences = 0, lag = 2)
seriesd <- diff(series,differences = 1, lag = 2)
myplot(series)
mylines(seriesd)
myplot(series)
myplot(lag(series, k=1))
myplot(lag(series, k=2))
myplot(lag(series, k=4))
myplot(diff(series, lag=4))
myplot(diff(series, lag=1))
mylag <- function(series, lag=1) {
data <- c(rep(NA,lag),series[(lag+1):length(series)])
return(data)
}
myplot(seires)
myplot(series
)
seriesd <- mylag(series, 1)
head(seriesd)
mylines(seriesd)
head(series)
mylag <- function(series, lag=1) {
data <- c(series[(lag+1):length(series)],rep(NA,lag))
return(data)
}
seriesd <- mylag(series, 1)
myplot(series)
mylines(seriesd)
max(1,5)
series <- m.lr.resid
p=4
d=1
k=3
z <- series
length <- length(z)
data <- data.frame(z)
rm(test, test2)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
View(data)
seriesd <- series[(1+d):(length+d)]
seriesd==data[,2]
tail(seriesd)
tail(data[,2])
data <- data.frame(data, seriesd)
View(data)
seriesThreshold <- series[(1+d):(length+d)]
data <- data.frame(data, seriesThreshold)
rm(seriesd)
rm(data)
z <- series
length <- length(z)
data <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# seriesd: series of threshold values by which the cases of data will be sorted (z_(t-d))
seriesThreshold <- series[(1+d):(length+d)]
data <- data.frame(data, seriesThreshold)
View(data)
arrangedData <- data(order(data$thresholdSeries))
arrangedData <- data[order(data$thresholdSeries),]
arrangedData <- order(data, data$thresholdSeries)
arrangedData <- order(data$thresholdSeries)
arrangedData <- data[order(data$thresholdSeries)]
arrangedData <- data[order(data$thresholdSeries),]
head(data$thresholdSeries)
head(data)
data <- data.frame(data, thresholdSeries)
z <- series
length <- length(z)
data <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# seriesd: series of threshold values by which the cases of data will be sorted (z_(t-d))
thresholdSeries <- series[(1+d):(length+d)]
data <- data.frame(data, thresholdSeries)
View(data)
data <- (data[1:(length-max(p,d)),])
View(data)
arrangedData <- data[order(data$thresholdSeries),]
View(arrangedData)
View(arrangedData)
View(arrangedData)
summary(ur.df(PYR, type="drift", lags=4))
summary(ur.df(series, type="drift", lags=4))
summary(ur.df(series, type="drift"))
summary(ur.df(diff(series), type="drift"))
summary(ur.df(series, type="drift"))
getm <- function(series){
summary(ur.df(series, type="drift"))
paste("Stationary: ",3*sqrt(length(series)))
paste("Unit Root:  ",5*sqrt(length(series)))
}
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- paste("Stationary: m=",3*sqrt(length(series)))
m2 <- paste("Unit Root: m=",5*sqrt(length(series)))
cat(paste(m1, m2, sep='\n'))
}
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2, sep='\n'))
}
getm(series)
m1 <- "huhu"
cat(m1)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
}
getm(series)
(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
m1 <- as.character(paste("   Stationary: m= \n",3*sqrt(length(series))))
m2 <- as.character(paste("   Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
m1 <- as.character(paste("   Stationary: m= \n",round(3*sqrt(length(series)),0)))
cat(paste(m1, m2))
m1 <- as.character(paste("   Stationary:\n m= ",round(3*sqrt(length(series)),0)))
cat(paste(m1, m2))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root: m=",5*sqrt(length(series)),0))
cat(paste(m1, m2))
cat(paste(string1, string2, string3))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
getm <- function(series){
(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
}
rm(string1,string2,string3)
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
}
getm(series)
paste(summary(ur.df(series, type="drift")))
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
return(summary(ur.df(series, type="drift")))
cat(paste(string1, string2, string3))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
return((ur.df(series, type="drift")))
cat(paste(string1, string2, string3))
}
getm(series)
string4 <- as.character((summary(ur.df(series, type="drift"))))
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(paste(string1, string2, string3))
return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
#return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
summary(ur.df(series, type="drift"))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
}
getm(series)
getm <- function(series){
paste(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
}
getm(series)
getm <- function(series, stationary=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(m)
}
getm(series)
getm <- function(series, stationary=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
return(m)
}
getm(series)
ncol(data)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
m <- getm(series)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
getm <- function(series, stationary=TRUE, verbore=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
if (!verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(m)
}
m <- getm(series)
getm <- function(series, stationary=TRUE, verbose=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
if (!verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(m)
}
m <- getm(series)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
regime <- arrangedData[1:m,1:(ncol(arrangedData)-1)]
mylines(regime[,1])
save.image("~/R-Projects/TAR/.RData")
# calculate predictive residuals with recursive OLS to select optimal threshold lag d
getPredictiveResiduals <- function(data, m) {
predictiveResiduals <- NULL
# thresholdSeries: series of threshold values by which the cases of data will be sorted (z_(t-d))
thresholdSeries <- series[(1+d):(length+d)]
data <- data.frame(data, thresholdSeries)
# remove NA rows
data <- (data[1:(length-max(p,d)),])
# rearrange cases by threshold Series
arrangedData <- data[order(data$thresholdSeries),]
regime <- data[1:m,1:(ncol(arrangedData)-1)]
return(predictiveResiduals)
}
library(vars)
VARselect(m.lr.resid)
round(((VARselect(m.lr.resid)$selection[1]+VARselect(m.lr.resid)$selection[3])/2), digits = 0)
round(((VARselect(m.lr.resid)$selection[1]+VARselect(m.lr.resid)$selection[3])/2), digits = 0) + 5
View(data)
test <- data
rm(m1,m2,m3)
# calculate m
getRegimeSize <- function(series, stationary=TRUE, verbose=FALSE){
if(stationary==TRUE) regimeSize <- round(3*sqrt(length(series)),0)
else regimeSize <- round(5*sqrt(length(series)),0)
if (verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: suggested regime size m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  suggested regime size m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(regimeSize)
}
rm(getm)
rm(test)
z <- m.lr.resid
series <- m.lr.resid
for(i in 1:p) {
z <- series[(1+i):(length+i)]
test <- data.frame(test,z)
}
test <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
test <- data.frame(test,z)
}
View(test)
test2 <- test
testordered <- test[order(test[,1+d]),]
View(testordered)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
test <- data.frame(test,z)
}
View(test)
rm(test)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
test <- data.frame(test,z)
}
test <- NULL
for(i in 1:p) {
z <- series[(1+i):(length+i)]
test <- data.frame(test,z)
}
z <- series
length(z)
data2 <- data
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
length(series)
length(z)
z <- series
length <- length(z)
data <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
View(data)
data <- data[1:nrow(data)-p,]
data <- data[1:(nrow(data)-p),]
View(data)
data <- data[order(data[d+1]),]
View(data)
regime <- data[1:60,]
testlm <- summary(lm(z~., data=regime))
testlm$coefficients
testlm$coefficients[1,]
testlm$coefficients[,1]
testlm$coefficients[,1]*data[61,2:ncol(data)]
testlm$coefficients[,1]%*%data[61,2:ncol(data)]
str(testlm$coefficients)
str(testlm$coefficients[,1])
head(test)
View(data)
View(data2)
data2 <- data
data2 <- data.frame(data2, rep(1))
View(data2)
lm(z~-.data=test)
lm(z~.data=test)
lm(z~.,data=test)
lm(z~.,data=data)
lm(z~.,data=data2)
lm(z~.,data=data2-1)
lm(z~.-1,data=data2-1)
str(data2[6])
save.image("~/R-Projects/TAR/.RData")
savehistory("~/R-Projects/TAR/.Rhistory")
rm(A,B)
rm(a,b)
df.MEI_EA_US  <- MEI
rm(MEI)
View(df.MEI_EA_US)
View(df.MEI_EA_US)
