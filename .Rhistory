mplot(agg)
mplot(e)
mlines(agg)
mplot(agg)
mlines(e)
summary(lm1)
lm1
agg <- -0.245712+resid01-0.067178*irlt-0.243089*y-0.220881*m1
mplot(agg)
mlines(e)
mlines(resid01)
source('~/R-Projects/TAR/load.R')
m.lr <- summary(lm(e~m1+y+irlt))
m.lr.resid <- as.numeric(lm1$residuals[2:length(lm1$residuals)])
de <- diff(e)
m.ecm <- summary(lm(diff(e)~1+m.lr.resid+diff(e,lag = 1)))
m.ecm
mplot(diff(e))
mlines(diff(e),lag=1)
mlines(diff(elag=1))
mlines(diff(e,lag=1))
mlines(diff(e,lag=2))
mplot(diff(e))
mlines(diff(e,lag=2))
length(diff(e, lag=1))
length(diff(e, lag=2))
m.ecm <- summary(lm(diff(e)~1+m.lr.resid+diff(e,lag = 2)))
m.ecm <- summary(lm(diff(e)[2:length(diff(e))]~1+m.lr.resid[2:length(m.lr.resid)]+diff(e,lag = 2)))
m.ecm
save.image("~/R-Projects/TAR/.RData")
mplot(m.lr.resid)
mplot(m.lr.resid)
mplot(m.lr.resid)
ar.ols(m.lr.resid)
summary(ar.ols(m.lr.resid))
library(vars)
VARselect(m.lr.resid)
summary(lm(m.lr.resid~lag(m.lr.resid,k = 1)+lag(m.lr.resid,k = 2)))
summary(lm(m.lr.resid~lag(m.lr.resid,k = 2)+lag(m.lr.resid,k = 3)))
VARselect(m.lr.resid)
VARselect(m.lr.resid)[1]
VARselect(m.lr.resid)[1][1]
VARselect(m.lr.resid)[1,1]
VARselect(m.lr.resid)$selection
VARselect(m.lr.resid)$selection[1]
VARselect(m.lr.resid)$selection[3]
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2, digits=0))
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2), digits=0))
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2), digits=0)
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2, digits=0)
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2)
round(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2
round((VARselect(x)$selection[1]+VARselect(x)$selection[3])/2), digits=2)
VARselect(x)$selection[1]+VARselect(x)$selection[3])
VARselect(x)$selection[1]+VARselect(x)$selection[3]
(VARselect(x)$selection[1]+VARselect(x)$selection[3])/2
ar.ols(m.lr.resid)
acf(m.lr.resid)
pacf(m.lr.resid)
acf(m.lr.resid)
summary(acf(m.lr.resid))
acf(m.lr.resid,plot = FALSE)
?ar.ols
ar.ols
ar.ols(m.lr.resid)
m.lr.resid[0]
m.lr.resid[1]
mar <- function(x, lags=0) {
if(lags==0) {
lags <- round(((VARselect(x)$selection[1]+VARselect(x)$selection[3])/2), digits = 0)
}
length <- length(x)
data <- data.frame(x)
for(i in 1:lags) {
series <- x[(1+i):(length+i)]
data <- c(data,series)
}
return(data)
}
test <- mar(m.lr.resid)
rm(test)
x <- m.lr.resid*3
df1 <- data.frame(m.lr.resid)
df1 <- data.frame(df1,x)
mar <- function(x, lags=0) {
if(lags==0) {
lags <- round(((VARselect(x)$selection[1]+VARselect(x)$selection[3])/2), digits = 0)
}
length <- length(x)
data <- data.frame(x)
for(i in 1:lags) {
series <- x[(1+i):(length+i)]
data <- data.frame(data,series)
}
return(data)
}
df1 <- mar(m.lr.resid)
head(df1)
tail(df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- z[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data)
}
rm(df1)
df1 <- mar(m.lr.resid)
tail(df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data)
}
df1 <- mar(m.lr.resid)
tail(df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data[1:(length(z)-lags)])
}
tail(df1)
df1 <- mar(m.lr.resid)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
return(data[1:(length(z)-lags),])
}
df1 <- mar(m.lr.resid)
tail(df1)
head(df1)
lm(z~,data=df1)
lm(z~.,data=df1)
mar <- function(z, lags=0) {
if(lags==0) {
lags <- round(((VARselect(z)$selection[1]+VARselect(z)$selection[3])/2), digits = 0)
}
series <- z
length <- length(z)
data <- data.frame(z)
for(i in 1:lags) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# remove NA rows
data <- (data[1:(length(z)-lags),])
AR <- lm(z~., data=data)
return(AR)
}
mar(m.lr.resid)
mar(m.lr.resid, lags=2)
mar(m.lr.resid)
rm(df1)
summary(ur.df(m.lr.resid, type="drift"))
mar(m.lr.resid)
summary(mar(m.lr.resid))
summary(mar(m.lr.resid, lags=5))
thresholdLags <- seq(1:4)
source('~/R-Projects/TAR/myScripts.R')
rm(mar, mlines, mplot)
source('~/R-Projects/TAR/mytar.R')
rm(thresholdLags)
S <- seq(1:4)
test <- mytar(m.lr.resid, p=1, S=S)
source('~/R-Projects/TAR/mytar.R')
test <- mytar(m.lr.resid, p=1, S=S)
source('~/R-Projects/TAR/mytar.R')
test <- myNonLinearityTest(m.lr.resid, p=4)
View(test)
install.packages("ts")
install.packages("tsDyn")
library(tsDyn)
order(test)
order(test[,1])
View(test)
head(test)
head(order(test))
head(order(test),20)
source('~/R-Projects/TAR/mytar.R')
test <- myNonLinearityTest(m.lr.resid)
View(test)
test2 <- test[order(z),]
test2 <- test[order(test$z),]
View(test2)
View(test)
myplot(test2[1,])
myplot(test2[1,])
myplot(test2[1,])
myplot(test2[,1])
myplot(test2[,2])
myplot(test2[,1])
myplot(test[,1])
myplot(test2[,1])
myplot(test2[,1])
source('~/R-Projects/TAR/myScripts.R')
test3 <- order(m.lr.resid)
myplot(test3)
test3 <- m.lr.resid[order(m.lr.resid)]
myplot(test3)
myplot(test3)
series  <- m.lr.resid
myplot(series)
idx <- order(series)
myplot(idx)
d <- 2
seriesd <- lag(series, lag=d)
myplot(series)
mmylines(seriesd)
mylines(seriesd)
seriesd <- lag(series, d)
mylines(seriesd)
?lag
seriesd <- lag(series, k=d)
myplot(series)
mylines(seriesd)
?lag
seriesd <- diff(series,differences = 0, lag = 2)
seriesd <- diff(series,differences = 1, lag = 2)
myplot(series)
mylines(seriesd)
myplot(series)
myplot(lag(series, k=1))
myplot(lag(series, k=2))
myplot(lag(series, k=4))
myplot(diff(series, lag=4))
myplot(diff(series, lag=1))
mylag <- function(series, lag=1) {
data <- c(rep(NA,lag),series[(lag+1):length(series)])
return(data)
}
myplot(seires)
myplot(series
)
seriesd <- mylag(series, 1)
head(seriesd)
mylines(seriesd)
head(series)
mylag <- function(series, lag=1) {
data <- c(series[(lag+1):length(series)],rep(NA,lag))
return(data)
}
seriesd <- mylag(series, 1)
myplot(series)
mylines(seriesd)
max(1,5)
series <- m.lr.resid
p=4
d=1
k=3
z <- series
length <- length(z)
data <- data.frame(z)
rm(test, test2)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
View(data)
seriesd <- series[(1+d):(length+d)]
seriesd==data[,2]
tail(seriesd)
tail(data[,2])
data <- data.frame(data, seriesd)
View(data)
seriesThreshold <- series[(1+d):(length+d)]
data <- data.frame(data, seriesThreshold)
rm(seriesd)
rm(data)
z <- series
length <- length(z)
data <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# seriesd: series of threshold values by which the cases of data will be sorted (z_(t-d))
seriesThreshold <- series[(1+d):(length+d)]
data <- data.frame(data, seriesThreshold)
View(data)
arrangedData <- data(order(data$thresholdSeries))
arrangedData <- data[order(data$thresholdSeries),]
arrangedData <- order(data, data$thresholdSeries)
arrangedData <- order(data$thresholdSeries)
arrangedData <- data[order(data$thresholdSeries)]
arrangedData <- data[order(data$thresholdSeries),]
head(data$thresholdSeries)
head(data)
data <- data.frame(data, thresholdSeries)
z <- series
length <- length(z)
data <- data.frame(z)
for(i in 1:p) {
z <- series[(1+i):(length+i)]
data <- data.frame(data,z)
}
# seriesd: series of threshold values by which the cases of data will be sorted (z_(t-d))
thresholdSeries <- series[(1+d):(length+d)]
data <- data.frame(data, thresholdSeries)
View(data)
data <- (data[1:(length-max(p,d)),])
View(data)
arrangedData <- data[order(data$thresholdSeries),]
View(arrangedData)
View(arrangedData)
View(arrangedData)
summary(ur.df(PYR, type="drift", lags=4))
summary(ur.df(series, type="drift", lags=4))
summary(ur.df(series, type="drift"))
summary(ur.df(diff(series), type="drift"))
summary(ur.df(series, type="drift"))
getm <- function(series){
summary(ur.df(series, type="drift"))
paste("Stationary: ",3*sqrt(length(series)))
paste("Unit Root:  ",5*sqrt(length(series)))
}
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- paste("Stationary: m=",3*sqrt(length(series)))
m2 <- paste("Unit Root: m=",5*sqrt(length(series)))
cat(paste(m1, m2, sep='\n'))
}
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2, sep='\n'))
}
getm(series)
m1 <- "huhu"
cat(m1)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
}
getm(series)
(summary(ur.df(series, type="drift")))
m1 <- as.character(paste("Stationary: m=",3*sqrt(length(series))))
m2 <- as.character(paste("Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
m1 <- as.character(paste("   Stationary: m= \n",3*sqrt(length(series))))
m2 <- as.character(paste("   Unit Root: m=",5*sqrt(length(series))))
cat(paste(m1, m2), sep='\n')
m1 <- as.character(paste("   Stationary: m= \n",round(3*sqrt(length(series)),0)))
cat(paste(m1, m2))
m1 <- as.character(paste("   Stationary:\n m= ",round(3*sqrt(length(series)),0)))
cat(paste(m1, m2))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root: m=",5*sqrt(length(series)),0))
cat(paste(m1, m2))
cat(paste(string1, string2, string3))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
getm <- function(series){
(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
}
rm(string1,string2,string3)
getm(series)
getm <- function(series){
cat(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
}
getm(series)
paste(summary(ur.df(series, type="drift")))
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
return(summary(ur.df(series, type="drift")))
cat(paste(string1, string2, string3))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
return((ur.df(series, type="drift")))
cat(paste(string1, string2, string3))
}
getm(series)
string4 <- as.character((summary(ur.df(series, type="drift"))))
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0)))
cat(paste(string1, string2, string3))
return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(paste(string1, string2, string3))
return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
#return(summary(ur.df(series, type="drift")))
}
getm(series)
getm <- function(series){
summary(ur.df(series, type="drift"))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
}
getm(series)
getm <- function(series){
paste(summary(ur.df(series, type="drift")))
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(cat(paste(string1, string2, string3)))
}
getm(series)
getm <- function(series, stationary=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
return(m)
}
getm(series)
getm <- function(series, stationary=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
return(m)
}
getm(series)
ncol(data)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
m <- getm(series)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
getm <- function(series, stationary=TRUE, verbore=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
if (!verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(m)
}
m <- getm(series)
getm <- function(series, stationary=TRUE, verbose=TRUE){
if(stationary==TRUE) m <- round(3*sqrt(length(series)),0)
else m <- round(5*sqrt(length(series)),0)
if (!verbose) {
string1 <- as.character(paste("\n"))
string2 <- as.character(paste("   Stationary: m =",round(3*sqrt(length(series)),0),"\n"))
string3 <- as.character(paste("   Unit Root:  m =",round(5*sqrt(length(series)),0),"\n\n"))
cat(string1, string2, string3)
}
return(m)
}
m <- getm(series)
regime <- arrangedData[m,1:(ncol(arrangedData)-1)]
regime <- arrangedData[1:m,1:(ncol(arrangedData)-1)]
mylines(regime[,1])
save.image("~/R-Projects/TAR/.RData")
