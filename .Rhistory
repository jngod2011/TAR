plot(df.scatter[1]~df.scatter[2])
plot(df.scatter[1], df.scatter[2])
plot(df.scatter[,1], df.scatter[,2])
View(df.scatter)
names(df.scatter)[1] <- paste("threshold z_(t-",dMax, ")",sep = "")
View(df.scatter)
plot(df.scatter[,1], df.scatter[,3])
plot(df.scatter[,1], df.scatter[,3], type="l")
plot(df.scatter[,1], df.scatter[,4])
plot(df.scatter[,1], df.scatter[,5])
plot(df.scatter[,1], df.scatter[,6])
myplot(df.scatter[,1])
dMax
View(df.z)
dMax <- which.max(as.numeric(v.fStat))
S
for (d in 1:S) {
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
}
dMax <- which.max(as.numeric(v.fStat))
dMax
df.z <- df.y[ order( df.y[,(dMax+1)] ), ]
View(df.z)
sc.m <- getRegimeSize(df.z)
sc.n <- as.numeric(nrow(df.z))
v.predictiveResiduals <- NULL
df.tStats <- data.frame(NULL)
for (i in (sc.m-1):(sc.n-1)) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
sc.predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
v.tStats <- summary(lm.regime)$coefficients[,3]
df.tStats <- rbind.data.frame(df.tStats, v.tStats)
}
View(df.tStats)
names(df.tStats) <- names(v.tStats)
View(df.tStats)
names(df.tStats) <- gsub("y", "t", names(df.tStats)) # replace y with t in this vector of names
View(df.tStats)
names(df.tStats) <- gsub("(Intercept)", "t.0", names(df.tStats)) # replace y with t in this vector of names
View(df.tStats)
df.tStats <- cbind.data.frame(df.regime[,(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(m-1),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-1:(m-1),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:(m-1)),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:m),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:(m+1)),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:(m)),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:(m-1)),(dMax+1)], df.tStats) # add threshold variable to df
df.tStats <- cbind.data.frame(df.regime[-(1:(m-2)),(dMax+1)], df.tStats) # add threshold variable to df
View(df.tStats)
myplot(df.scatter[,1])
myplot(df.tStats[,1])
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.z <- df.y[ order( df.y[,(dMax+1)] ), ]
df.scatter <- getTStats(df.z, dMax, p)
View(df.scatter)
plot(df.scatter[,1])
plot(df.scatter)
plot(df.scatter[,1])
plot(df.scatter[,1], df.scatter[,2])
plot(df.scatter[,1], df.scatter[,3])
plot(df.scatter[,1], df.scatter[,4])
plot(df.scatter[,1], df.scatter[,5])
plot(df.scatter[,1], df.scatter[,6])
plot(df.scatter[,1], df.scatter[,7])
plot(df.scatter[,1], df.scatter[,6], type="l")
lm.regime
summary(lm.regime)
plot(df.scatter[,1], abs(df.scatter[,6]), type="l")
plot(df.scatter[,1], abs(df.scatter[,5]), type="l")
plot(df.scatter[,1], abs(df.scatter[,4]), type="l")
plot(df.scatter[,1], abs(df.scatter[,3]), type="l")
plot(df.scatter[,1], abs(df.scatter[,2]), type="l")
View(df.scatter)
plot(df.scatter[,1], abs(df.scatter[,3]), type="l")
plot(df.scatter[,1], abs(df.scatter[,4]), type="l")
plot(df.scatter[,1], abs(df.scatter[,5]), type="l")
plot(df.scatter[,1], abs(df.scatter[,6]), type="l")
lm.regime <- lm(y~., data = df.regime)
lm.regime <- lm(y~.-1, data = df.regime)
summary(lm.regime)
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatter <- myNonLinearityTest2(series, S=4, p=4, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatter <- myNonLinearityTest2(series, S=4, p=4, method="TSAY")
View(df.scatter)
names(df.scatter)[1] <- paste("threshold z_(t-",dMax, ")",sep = "")
View(df.scatter)
plot(df.scatter[,1], abs(df.scatter[,2]), type="l")
plot(df.scatter[,1], abs(df.scatter[,3]), type="l")
plot(df.scatter[,1], abs(df.scatter[,4]), type="l")
mylines(df.scatter[,1], abs(df.scatter[,5]), type="l")
mylines(abs(df.scatter[,5]))
plot(df.scatter[,1], abs(df.scatter[,3]), type="l")
plot(df.scatter[,1], abs(df.scatter[,3]), type="l", pos=1.96)
plot(df.scatter[,1], abs(df.scatter[,3]), type="l")
axis(pos=1.96)
axis(side=1, at=c(0:10))
axis(side=2, at=c(0:10))
box()
plot(df.scatter[,1], abs(df.scatter[,3]), type="l", ylim=c(0,10))
plot(df.scatter[,1], abs(df.scatter[,1]), type="l", ylim=c(0,10))
plot(df.scatter[,1], abs(df.scatter[,2]), type="l", ylim=c(0,10))
plot(df.scatter[,1], abs(df.scatter[,2]), type="l")
plot(df.scatter[,1], abs(df.scatter[,2]), type="l", ylim=c(0,25))
mylines(abs(df.scatter[,3]))
mylines(abs(df.scatter[,4]))
mylines <- function (x, type="l") {
lines(x, type=type, col=round(runif(1,2,6),0))
}
mylines(abs(df.scatter[,4]))
lines(abs(df.scatter[,4]), type="l")
plot(df.scatter[,1], type="l", ylim=c(0,25))
plot(df.scatter[,2], type="l", ylim=c(0,25))
mylines(abs(df.scatter[,3]))
mylines(abs(df.scatter[,4]))
mylines(abs(df.scatter[,5]))
mylines(abs(df.scatter[,6]))
plot(df.scatter[,3], type="l", ylim=c(0,7))
plot(df.scatter[,3], type="l", ylim=c(0,8))
plot(df.scatter[,4], type="l", ylim=c(0,8))
plot(df.scatter[,3], type="l", ylim=c(0,8))
plot(df.scatter[,2], type="l", ylim=c(0,8))
plot(df.scatter[,2], type="l")
plot(df.scatter[,3], type="l")
plot(abs(df.scatter[,3]), type="l")
plot(abs(df.scatter[,3]), type="l", ylim=c(0,8))
mylines(abs(df.scatter[,4]), type="l")
mylines(abs(df.scatter[,5]), type="l")
mylines(abs(df.scatter[,6]), type="l")
mylines(2)
mylines(rep(2,367))
plot(df.scatter[,1],df.scatter[,2])
plot(df.scatter[,1],df.scatter[,3])
plot(df.scatter[,1],df.scatter[,4])
plot(df.scatter[,1],df.scatter[,4], ylab=c(2,5))
plot(df.scatter[,1],df.scatter[,4], ylim=c(2,5))
plot(df.scatter[,1],df.scatter[,4])
plot(df.scatter[,1],df.scatter[,5])
mylines(rep(2.56,367))
mylines(rep(-2.56,367))
mylines(df.scatter[,1],rep(-2.56,367))
lines(df.scatter[,1],rep(-2.56,367))
plot(df.scatter[,1],df.scatter[,4])
plot(df.scatter[,1],df.scatter[,3])
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatterLarger <- myNonLinearityTest2(series, p=10, S=10, method="TSAY")
df.scatterLarger <- myNonLinearityTest2(series, p=10, S=9, method="TSAY")
v.y <- as.numeric(series)
sc.N <- as.numeric(length(y))
p
p <- 10
df.y <- getAR(v.y)
# calculate test statistc
v.fStat <- data.frame(NULL)
S <- 10
d <- 1
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
v.fStat
d <- 2
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
method
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
d <- 3
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
d <- 4
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
d <- 5
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatterLarger <- myNonLinearityTest2(series, p=10, S=10, method="TSAY")
v.y <- as.numeric(series)
sc.N <- as.numeric(length(y))
df.y <- getAR(v.y, p)
View(df.y)
v.fStat <- data.frame(NULL)
d <- 1
df.z <- df.y[ order( df.y[,(d+1)] ), ] # order by threshold variable z_(t-d)
View(df.z)
v.fStat <- c(v.fStat, getFStats(df.z, d, p, method))
p
sc.m <- getRegimeSize(df.z)
sc.n <- as.numeric(nrow(df.z))
v.predictiveResiduals <- NULL
v.eta <- NULL
sc.m
i
i <- 61
sc.n
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
sc.predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
mat.V <- matrix(data=0, nrow=p, ncol=p)
mat.V <- solve( getSumOuterProducts(df.regime[,-1]) )
sc.normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% mat.V %*% as.numeric(df.z[(i+1), -1])))
v.eta <- c(v.eta, sc.predResid/sc.normalizer)
v.predictiveResiduals <- v.eta
i
i <- (sc.n-1)
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data = df.regime)
sc.predResid <- as.numeric(df.z[(i+1),1] - lm.regime$coefficients[1] - (lm.regime$coefficients[-1] %*% as.numeric(df.z[(i+1),-1])  ))
mat.V <- matrix(data=0, nrow=p, ncol=p)
mat.V <- solve( getSumOuterProducts(df.regime[,-1]) )
sc.normalizer <- as.numeric(sqrt(1 + as.numeric(df.z[(i+1), -1]) %*% mat.V %*% as.numeric(df.z[(i+1), -1])))
v.eta <- c(v.eta, sc.predResid/sc.normalizer)
v.predictiveResiduals <- v.eta
df.test <- data.frame(v.predictiveResiduals, df.z[m:n, 2:(ncol(df.z))])
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatterLarge <- myNonLinearityTest2(series, p=10, S=10, method="TSAY")
v.fStat
df.scatterLarge <- myNonLinearityTest2(series, p=10, S=10, method="TSAY")
source('D:/Documents/R-Projects/TAR/mytar3.R')
df.scatterLarge <- myNonLinearityTest2(series, p=10, S=10, method="TSAY")
df.scatterLarge
df.scatterLarge <- myNonLinearityTest2(series, p=20, S=10, method="TSAY")
debugSource('D:/Documents/R-Projects/TAR/mytar3.R')
View(getFStats)
rm(y)
source('D:/Documents/R-Projects/TAR/mytar3.R')
d
p
p <- 4
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
View(df.y)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.m <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- lm.regime$residuals[i]
}
sc.resid
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.m <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- lm.regime$residuals[i-1]
}
sc.resid
View(df.z)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.m <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- lm.regime$residuals[i]
ve.predResid <- c(ve.predResid, sc.resid)
}
predResid
m
sc.m
rm(m)
d
sc.m <- getRegimeSize(df.y)
sc.m
ve.predResid <- NULL
i
i <- sc.m+1
i
df.regime <- df.z[1:(i-1),]
View(df.regime)
lm.regime <- lm(y~., data=df.regime)
lm.regime
lm.regime$residuals[i]
i
sc.resid <- lm.regime$residuals[i-1]
ve.predResid <- c(ve.predResid, sc.resid)
sc.resid <- as.numeric(lm.regime$residuals[i-1])
ve.predResid <- c(ve.predResid, sc.resid)
ve.predResid <- NULL
ve.predResid <- c(ve.predResid, sc.resid)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.m <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i-1])
ve.predResid <- c(ve.predResid, sc.resid)
}
sc.n
p
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.n <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i-1])
ve.predResid <- c(ve.predResid, sc.resid)
}
428-62
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-m,-1])
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-sc.m,-1])
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-(1:sc.m),-1])
View(df.estimatedResiduals)
View(df.z)
View(df.estimatedResiduals)
ve.estimResid <- lm(ve.predResid~., data=df.estimatedResiduals)$residuals
ve.estimResid <- as.numeric(lm(ve.predResid~., data=df.estimatedResiduals)$residuals)
sum(ve.predResid^2)
sum(ve.predResid^2)-sum(ve.estimResid^2)
sum(ve.predResid^2)-sum(ve.estimResid^2)/5
(sum(ve.predResid^2)-sum(ve.estimResid^2)/5)/((sum(ve.estimResid^2))/sc.n)
(sum(ve.predResid^2)-sum(ve.estimResid^2)/5)/((sum(ve.estimResid^2))/sc.n-p-sc.m)
(sum(ve.predResid^2)-sum(ve.estimResid^2)/5)/((sum(ve.estimResid^2))/(sc.n-p-sc.m))
sum(ve.estimResid^2)
sum(ve.estimResid^2)/sc.n
sc.n
sum(ve.estimResid^2)/(sc.n-sc.m-d-p)
(sum(ve.predResid^2)-sum(ve.estimResid^2))/5
0.001201315/0.0007157343
((sum(ve.predResid^2)-sum(ve.estimResid^2))/5)/((sum(ve.estimResid^2))/(sc.n-p-sc.m))
((sum(ve.predResid^2)-sum(ve.estimResid^2))/5)/((sum(ve.estimResid^2))/(sc.n-p-sc.m-d))
sc.FStat <- ((sum(ve.predResid^2)-sum(ve.estimResid^2))/5)  /  ( (sum(ve.estimResid^2) ) / (sc.n-p-sc.m-d))
sc.FStat <- ((sum(ve.predResid^2)-sum(ve.estimResid^2))/5)  /  ( sum(ve.estimResid^2 ) / (sc.n-p-sc.m-d))
source('D:/Documents/R-Projects/TAR/FTest.R')
FTest(series, 4, 1)
source('D:/Documents/R-Projects/TAR/FTest.R')
FTest(series, 4, 1)
FTest(series, 4, 2)
FTest(series, 4, 3)
FTest(series, 4, 4)
FTest(series, 5, 1)
FTest(series, 5, 2)
FTest(series, 5, 3)
FTest(series, 5, 4)
FTest(series, 15, 1)
FTest(series, 25, 1)
FTest(series, 55, 1)
View(MEI)
View(df.macro)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.n <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i-1])
ve.predResid <- c(ve.predResid, sc.resid)
}
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-(1:sc.m),-1])
ve.estimResid <- as.numeric(lm(ve.predResid~., data=df.estimatedResiduals)$residuals)
sc.FStat <- ((sum(ve.predResid^2)-sum(ve.estimResid^2))/5) / ( sum(ve.estimResid^2 )/(sc.n-p-sc.m-d) )
return(sc.FStat)
sc.FStat
FTest(series, p=4, d=1)
FTest(series, p=4, d=2)
FTest(series, p=4, d=3)
FTest(series, p=4, d=4)
predResid1 <- FTest(series, p=4, d=1)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.n <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
for(i in (sc.m+1):sc.n) {
df.regime <- df.z[1:(i-1),]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i-1])
ve.predResid <- c(ve.predResid, sc.resid)
}
source('D:/Documents/R-Projects/TAR/FTest.R')
predResid1 <- FTest(series, p=4, d=1)
rm(predResid1)
rm(predResid, predictiveResiduals)
lm.regime
lm.regime$coefficients
summary(lm.regime)$coefficients
summary(lm.regime)$coefficients[,4]
summary(lm.regime)$coefficients[,3]
source('D:/Documents/R-Projects/TAR/FTest2.R')
predResid1 <- FTest(series, p=4, d=1)
source('D:/Documents/R-Projects/TAR/FTest2.R')
predResid1 <- FTest(series, p=4, d=1)
df.scatter1 <- FTest(series, p=4, d=1)
source('D:/Documents/R-Projects/TAR/FTest2.R')
df.scatter1 <- FTest(series, p=4, d=1)
View(df.scatter1)
source('D:/Documents/R-Projects/TAR/FTest2.R')
df.scatter1 <- FTest(series, p=4, d=1)
View(df.tStats)
sc.m
length(series)
432-62
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.n <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
ve.tStat <- NULL
df.tStats <- NULL
df.scatter <- NULL
for(i in sc.m:sc.n) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i])
ve.predResid <- c(ve.predResid, sc.resid)
#ve.tStat <- summary(lm.regime)$coefficients[,3]
#df.tStats <- rbind.data.frame(df.tStats, ve.tStat)
}
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-(1:sc.m),-1])
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-(1:(sc.m-1)),-1])
ve.estimResid <- as.numeric(lm(ve.predResid~., data=df.estimatedResiduals)$residuals)
sc.FStat <- ((sum(ve.predResid^2)-sum(ve.estimResid^2))/5) / ( sum(ve.estimResid^2 )/(sc.n-p-sc.m-d) )
sc.FStat
d
cat(sc.FStat)
ve.tStat <- summary(lm.regime)$coefficients[,3]
source('D:/Documents/R-Projects/TAR/FTest2.R')
df.scatter1 <- FTest(series,p=4,d=1)
View(df.scatter1)
plot(df.scatter1[,1], df.scatter1[,2])
plot(df.scatter1[,1], df.scatter1[,3])
plot(df.scatter1[,1], df.scatter1[,4])
plot(df.scatter1[,1], df.scatter1[,5])
plot(df.scatter1[,1], df.scatter1[,6])
source('D:/Documents/R-Projects/TAR/FTest2.R')
df.scatter1 <- FTest(series,p=4,d=2)
df.scatter1 <- FTest(series,p=4,d=3)
df.scatter1 <- FTest(series,p=4,d=4)
ve.y <- series
df.y <- getAR(v.y, p)
sc.m <- getRegimeSize(df.y)
sc.n <- nrow(df.y)
df.z <- df.y[ order( df.y[,(d+1)] ), ]
ve.predResid <- NULL
ve.tStat <- NULL
df.tStats <- NULL
df.scatter <- NULL
for(i in sc.m:sc.n) {
df.regime <- df.z[1:i,]
lm.regime <- lm(y~., data=df.regime)
sc.resid <- as.numeric(lm.regime$residuals[i])
ve.predResid <- c(ve.predResid, sc.resid)
ve.tStat <- summary(lm.regime)$coefficients[,3]
df.tStats <- rbind.data.frame(df.tStats, ve.tStat)
}
df.estimatedResiduals <- cbind.data.frame(ve.predResid, df.z[-(1:(sc.m-1)),-1])
ve.estimResid <- as.numeric(lm(ve.predResid~., data=df.estimatedResiduals)$residuals)
sc.FStat <- ((sum(ve.predResid^2)-sum(ve.estimResid^2))/(p+1)) / ( sum(ve.estimResid^2 )/(sc.n-p-sc.m-d) )
df.scatter <- cbind.data.frame(ve.predResid, df.tStats)
p
d
View(df.estimatedResiduals)
summary(lm(ve.predResid~., data=df.estimatedResiduals))
View(df.scatter1)
df.scatter3 <- FTest(series,p=4,d=3)
View(df.scatter3)
plot(df.scatter3[,1], df.scatter1[,6])
plot(df.scatter3[,1], df.scatter1[,6], type="l")
plot(df.scatter3[,1], df.scatter1[,6], type="p")
plot(df.scatter3[,6], df.scatter1[,1], type="p")
plot(df.scatter3[,6], df.scatter1[,1], type="p", xlim="z_(t-4)")
plot(df.scatter3[,6], df.scatter1[,1], type="p", xlab="z_(t-4)")
plot(df.scatter3[,6], df.scatter1[,1], type="p", ykab="predictiveResiduals", xlab="z_(t-4)")
plot(df.scatter3[,6], df.scatter1[,1], type="p", ylab="predictiveResiduals", xlab="z_(t-4)")
plot(abs(df.scatter3[,6]), df.scatter1[,1], type="p", ylab="predictiveResiduals", xlab="z_(t-4)")
plot(df.scatter3[,1], abs(df.scatter1[,6]), type="p", xlab="predictiveResiduals", ylab="z_(t-4)")
plot(df.scatter3[,1], abs(df.scatter1[,6]), type="p", xlab="predictiveResiduals", ylab="t-stat for z_(t-4)")
plot(df.z[,5], abs(df.scatter1[,6]), type="p", xlab="predictiveResiduals", ylab="t-stat for z_(t-4)")
source('D:/Documents/R-Projects/TAR/FTest2.R')
df.scatter3 <- FTest(series,p=4,d=3)
plot(abs(df.scatter3[,6]), df.scatter3[,1], type="p", xlab="predictiveResiduals", ylab="t-stat for z_(t-4)")
plot(abs(df.scatter3[,6]), df.scatter3[,1], type="p", xlab="t-stat for z_(t-4)", ylab="z_(t-d*)")
plot(abs(df.scatter3[,6]), df.scatter3[,1], type="p", xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="l")
plot(abs(df.scatter3[,6]), df.scatter3[,1], type="l", xlab="t-stat for z_(t-4)", ylab="z_(t-d*)")
plot(abs(df.scatter3[,6]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
plot(abs(df.scatter3[,5]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
plot(abs(df.scatter3[,4]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
plot(abs(df.scatter3[,3]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
plot(abs(df.scatter3[,2]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
plot(abs(df.scatter3[,6]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="p")
?plot
plot(abs(df.scatter3[,6]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="o")
par()
par(mfrow=c(2,2))
plot(abs(df.scatter3[,3]), df.scatter3[,1], xlab="t-stat for z_(t-1)", ylab="z_(t-d*)", type="o")
plot(abs(df.scatter3[,4]), df.scatter3[,1], xlab="t-stat for z_(t-2)", ylab="z_(t-d*)", type="o")
plot(abs(df.scatter3[,5]), df.scatter3[,1], xlab="t-stat for z_(t-3)", ylab="z_(t-d*)", type="o")
plot(abs(df.scatter3[,6]), df.scatter3[,1], xlab="t-stat for z_(t-4)", ylab="z_(t-d*)", type="o")
