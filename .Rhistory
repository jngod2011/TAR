log(df.US_UK[,5])-log(df.US_UK[,12]),      # log m1 index
log(df.US_UK[,6])-log(df.US_UK[,13]),      # log m3 index
log(df.US_UK[,15])-log(df.US_UK[,8]),      # log gdp
df.US_UK[,2]-df.US_UK[,9],                 # irlt
df.US_UK[,3]-df.US_UK[,10],                # irst
df.US_UK[,4]-df.US_UK[,11],                # immediate
log(df.US_UK[,7])-log(df.US_UK[,14])       # log shares index
)
df.log_US_EA <- data.frame(log(df.US_EA[,16]),                        # log exchange rate
log(df.US_EA[,5])-log(df.US_EA[,12]),      # log m1 index
log(df.US_EA[,6])-log(df.US_EA[,13]),      # log m3 index
log(df.US_EA[,15])-log(df.US_EA[,8]),      # log gdp
df.US_EA[,2]-df.US_EA[,9],                 # irlt
df.US_EA[,3]-df.US_EA[,10],                # irst
df.US_EA[,4]-df.US_EA[,11],                # immediate
log(df.US_EA[,7])-log(df.US_EA[,14])       # log shares index
)
df.log_US_RU <- data.frame(log(df.US_RU[,16]),                        # log exchange rate
log(df.US_RU[,5])-log(df.US_RU[,12]),      # log m1 index
log(df.US_RU[,6])-log(df.US_RU[,13]),      # log m3 index
log(df.US_RU[,15])-log(df.US_RU[,8]),      # log gdp
df.US_RU[,2]-df.US_RU[,9],                 # irlt
df.US_RU[,3]-df.US_RU[,10],                # irst
df.US_RU[,4]-df.US_RU[,11],                # immediate
log(df.US_RU[,7])-log(df.US_RU[,14])       # log shares index
)
which(df.log_US_RU[,1]==NaN)
which(df.log_US_RU[,1]=="NaN")
View(df.log_US_RU)
df.log_US_RU[-(1:161),]
df.log_US_RU <- df.log_US_RU[-(1:161),]
names(df.log_US_RU)
?data.frame
df.log_US_JP <- data.frame(row.names = c("s","m1","m3","gdp","irlt","irst","immediate","shares"),
log(df.US_JP[,16]),                        # log exchange rate
log(df.US_JP[,5])-log(df.US_JP[,12]),      # log m1 index
log(df.US_JP[,6])-log(df.US_JP[,13]),      # log m3 index
log(df.US_JP[,15])-log(df.US_JP[,8]),      # log gdp
df.US_JP[,2]-df.US_JP[,9],                 # irlt
df.US_JP[,3]-df.US_JP[,10],                # irst
df.US_JP[,4]-df.US_JP[,11],                # immediate
log(df.US_JP[,7])-log(df.US_JP[,14])       # log shares index
)
df.log_US_JP <- data.frame(setNames = c("s","m1","m3","gdp","irlt","irst","immediate","shares"),
log(df.US_JP[,16]),                        # log exchange rate
log(df.US_JP[,5])-log(df.US_JP[,12]),      # log m1 index
log(df.US_JP[,6])-log(df.US_JP[,13]),      # log m3 index
log(df.US_JP[,15])-log(df.US_JP[,8]),      # log gdp
df.US_JP[,2]-df.US_JP[,9],                 # irlt
df.US_JP[,3]-df.US_JP[,10],                # irst
df.US_JP[,4]-df.US_JP[,11],                # immediate
log(df.US_JP[,7])-log(df.US_JP[,14])       # log shares index
)
m1=log(df.US_JP[,5])-log(df.US_JP[,12]),      # log m1 index
df.log_US_JP <- data.frame(s=log(df.US_JP[,16]),                        # log exchange rate
m1=log(df.US_JP[,5])-log(df.US_JP[,12]),      # log m1 index
log(df.US_JP[,6])-log(df.US_JP[,13]),      # log m3 index
log(df.US_JP[,15])-log(df.US_JP[,8]),      # log gdp
df.US_JP[,2]-df.US_JP[,9],                 # irlt
df.US_JP[,3]-df.US_JP[,10],                # irst
df.US_JP[,4]-df.US_JP[,11],                # immediate
log(df.US_JP[,7])-log(df.US_JP[,14])       # log shares index
)
View(df.log_US_JP)
df.log_US_JP <- data.frame(s=log(df.US_JP[,16]),                        # log exchange rate
m1=log(df.US_JP[,5])-log(df.US_JP[,12]),     # log m1 index
m3=log(df.US_JP[,6])-log(df.US_JP[,13]),     # log m3 index
gdp=log(df.US_JP[,15])-log(df.US_JP[,8]),    # log gdp
irlt=df.US_JP[,2]-df.US_JP[,9],              # irlt
irst=df.US_JP[,3]-df.US_JP[,10],             # irst
immediate=df.US_JP[,4]-df.US_JP[,11],        # immediate
shares=log(df.US_JP[,7])-log(df.US_JP[,14])  # log shares index
)
View(df.log_US_JP)
df.log_US_JP <- data.frame(s=log(df.US_JP[,16]),                        # log exchange rate
m1=log(df.US_JP[,5])-log(df.US_JP[,12]),     # log m1 index
m3=log(df.US_JP[,6])-log(df.US_JP[,13]),     # log m3 index
gdp=log(df.US_JP[,15])-log(df.US_JP[,8]),    # log gdp
irlt=df.US_JP[,2]-df.US_JP[,9],              # irlt
irst=df.US_JP[,3]-df.US_JP[,10],             # irst
immediate=df.US_JP[,4]-df.US_JP[,11],        # immediate
shares=log(df.US_JP[,7])-log(df.US_JP[,14])  # log shares index
)
df.log_US_CH <- data.frame(s=log(df.US_CH[,16]),                        # log exchange rate
m1=log(df.US_CH[,5])-log(df.US_CH[,12]),     # log m1 index
m3=log(df.US_Ch[,6])-log(df.US_CH[,13]),     # log m3 index
gdp=log(df.US_CH[,15])-log(df.US_CH[,8]),    # log gdp
irlt=df.US_CH[,2]-df.US_CH[,9],              # irlt
irst=df.US_CH[,3]-df.US_CH[,10],             # irst
immediate=df.US_CH[,4]-df.US_CH[,11],        # immediate
shares=log(df.US_CH[,7])-log(df.US_CH[,14])  # log shares index
)
df.log_US_UK <- data.frame(s=log(df.US_UK[,16]),                        # log exchange rate
m1=log(df.US_UK[,5])-log(df.US_UK[,12]),     # log m1 index
m3=log(df.US_UK[,6])-log(df.US_UK[,13]),     # log m3 index
gdp=log(df.US_UK[,15])-log(df.US_UK[,8]),    # log gdp
irlt=df.US_UK[,2]-df.US_UK[,9],              # irlt
irst=df.US_UK[,3]-df.US_UK[,10],             # irst
immediate=df.US_UK[,4]-df.US_UK[,11],        # immediate
shares=log(df.US_UK[,7])-log(df.US_UK[,14])  # log shares index
)
df.log_US_EA <- data.frame(s=log(df.US_EA[,16]),                        # log exchange rate
m1=log(df.US_EA[,5])-log(df.US_EA[,12]),     # log m1 index
m3=log(df.US_EA[,6])-log(df.US_EA[,13]),     # log m3 index
gdp=log(df.US_EA[,15])-log(df.US_EA[,8]),    # log gdp
irlt=df.US_EA[,2]-df.US_EA[,9],              # irlt
irst=df.US_EA[,3]-df.US_EA[,10],             # irst
immediate=df.US_EA[,4]-df.US_EA[,11],        # immediate
shares=log(df.US_EA[,7])-log(df.US_EA[,14])  # log shares index
)
df.log_US_RU <- data.frame(s=log(df.US_RU[,16]),                        # log exchange rate
m1=log(df.US_RU[,5])-log(df.US_RU[,12]),     # log m1 index
m3=log(df.US_RU[,6])-log(df.US_RU[,13]),     # log m3 index
gdp=log(df.US_RU[,15])-log(df.US_RU[,8]),    # log gdp
irlt=df.US_RU[,2]-df.US_RU[,9],              # irlt
irst=df.US_RU[,3]-df.US_RU[,10],             # irst
immediate=df.US_RU[,4]-df.US_RU[,11],        # immediate
shares=log(df.US_RU[,7])-log(df.US_RU[,14])  # log shares index
)
rm(df.US_JP, df.US_CH, df.US_UK, df.US_EA, df.US_RU)
rm(ve.selectJP, ve.selectCH, ve.selectUK, ve.selectEA, ve.selectRU)
rm(ve.selectUS, ve.selectJP, ve.selectCH, ve.selectUK, ve.selectEA, ve.selectRU)
View(df.MEI_EA_US)
rm(df.MEI_EA_US)
View(df.log_US_EA)
View(df.log_US_JP)
df.log_US_EA <- df.log_US_EA[-439,]
df.log_US_EA <- df.log_US_EA[,-8]
View(df.log_US_EA)
View(df.log_US_RU)
df.log_US_RU <- df.log_US_RU[-(1:198),]
View(df.log_US_RU)
df.log_US_RU <- df.log_US_RU[-(436:439),]
View(df.log_US_RU)
View(df.log_US_RU)
df.log_US_RU <- df.log_US_RU[-(436:439),]
View(df.log_US_RU)
df.log_US_RU[436,]
df.log_US_RU <- data.frame(s=log(df.US_RU[,16]),                        # log exchange rate
m1=log(df.US_RU[,5])-log(df.US_RU[,12]),     # log m1 index
m3=log(df.US_RU[,6])-log(df.US_RU[,13]),     # log m3 index
gdp=log(df.US_RU[,15])-log(df.US_RU[,8]),    # log gdp
irlt=df.US_RU[,2]-df.US_RU[,9],              # irlt
irst=df.US_RU[,3]-df.US_RU[,10],             # irst
immediate=df.US_RU[,4]-df.US_RU[,11],        # immediate
shares=log(df.US_RU[,7])-log(df.US_RU[,14])  # log shares index
)
df.US_RU <- df.MEI_Master[,c(1,ve.selectUS, ve.selectRU)]
ve.selectRU <- c(41,42,43,44,45,46,47,48)
df.US_RU <- df.MEI_Master[,c(1,ve.selectUS, ve.selectRU)]
ve.selectUS <- c(26,27,28,29,30,31,32)
df.US_RU <- df.MEI_Master[,c(1,ve.selectUS, ve.selectRU)]
df.log_US_RU <- data.frame(s=log(df.US_RU[,16]),                        # log exchange rate
m1=log(df.US_RU[,5])-log(df.US_RU[,12]),     # log m1 index
m3=log(df.US_RU[,6])-log(df.US_RU[,13]),     # log m3 index
gdp=log(df.US_RU[,15])-log(df.US_RU[,8]),    # log gdp
irlt=df.US_RU[,2]-df.US_RU[,9],              # irlt
irst=df.US_RU[,3]-df.US_RU[,10],             # irst
immediate=df.US_RU[,4]-df.US_RU[,11],        # immediate
shares=log(df.US_RU[,7])-log(df.US_RU[,14])  # log shares index
)
df.log_US_RU <- df.log_US_RU[-(436:439),]
df.log_US_RU <- df.log_US_RU[-(1:198),]
df.log_US_RU <- df.log_US_RU[,-8]
View(df.log_US_RU)
View(df.log_US_JP)
df.log_US_JP <- df.log_US_JP[-439,]
df.log_US_JP <- df.log_US_JP[-(1:12),]
View(df.log_US_JP)
View(df.log_US_UK)
df.log_US_UK <- df.log_US_UK[-439,]
df.log_US_UK <- df.log_US_UK[-(1:96),]
rm(df.US_JP, df.US_CH, df.US_UK, df.US_EA, df.US_RU)
rm(ve.selectUS, ve.selectJP, ve.selectCH, ve.selectUK, ve.selectEA, ve.selectRU)
ve.errorEA <- summary(lm(s~., data=df.log_US_EA))$residuals
ve.errorEA <- summary(lm(s~., data=df.log_US_EA))$residuals
ve.errorJP <- summary(lm(s~., data=df.log_US_JP))$residuals
ve.errorRU <- summary(lm(s~., data=df.log_US_RU))$residuals
ve.errorUK <- summary(lm(s~., data=df.log_US_UK))$residuals
source('~/R-Projects/TAR/myScripts.R')
mj.plot(ve.errorEA)
mj.plot(ve.errorJP)
mj.plot(ve.errorRU)
mj.plot(ve.errorUK)
source('~/R-Projects/TAR/mytar3.R')
source('~/R-Projects/TAR/mytar3.R')
source('~/R-Projects/TAR/myScripts.R')
source('~/R-Projects/TAR/myScripts.R')
p
source('~/R-Projects/TAR/clearWorkspace.R')
p <- 0
ve.series  <- ve.errorEA
ve.y <- as.numeric(ve.series)
N <- as.numeric(length(ve.y))
if(p==0) {
p <- as.numeric(round(((VARselect(ve.y)$selection[1]+VARselect(ve.y)$selection[3])/2), digits = 0))
}
p
df.y <- getAR(ve.y, p)
df.y <- mj.getAR(ve.y, p)
source('~/R-Projects/TAR/myScripts.R')
df.y <- mj.getAR(ve.y, p)
source('~/R-Projects/TAR/myScripts.R')
df.y <- mj.getAR(ve.y, p)
View(df.y)
ve.fStat <- data.frame(NULL)
S <- 2
S <- 4
method <- "TSAY"
source('~/R-Projects/TAR/mytar3.R')
S
d <- 1
df.z <- df.y[order(df.y[, (d + 1)] ), ] # order by threshold variable z_(t-d)
View(df.z)
ve.fStat <- c(ve.fStat, mj.getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, mj.getFStats(df.z, d, p, method))
ve.fStat <- c(ve.fStat, mj.getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, mj.getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/myScripts.R')
rm(list=ls(pattern="^mj.")
)
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
ve.fStat <- c(ve.fStat, getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/myScripts.R')
ve.fStat <- c(ve.fStat, getFStats(df.z, d, p, method))
source('~/R-Projects/TAR/mytar3.R')
rm(p, ve.y, N, df.y, ve.fStat, S, method, d)
NonLinearityTest <- function(ve.series, p=0, S=1, k=3, method="MARTENS") {
k
)
source('~/R-Projects/TAR/mytar3.R')
rm(NonLinearityTest2)
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/myScripts.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
source('~/R-Projects/TAR/mytar3.R')
NonLinearityTest(ve.errorEA)
NonLinearityTest(ve.errorEA, S=4)
NonLinearityTest(ve.errorEA, S=4, method="TSAY")
source('~/R-Projects/TAR/FTest2.R')
FTest(ve.errorEA, 4, 4)
source('~/R-Projects/TAR/FTest2.R')
source('~/R-Projects/TAR/FTest2.R')
FTest(ve.errorEA, 4, 4)
source('~/R-Projects/TAR/FTest2.R')
FTest(ve.errorEA, 4, 4)
source('~/R-Projects/TAR/FTest2.R')
FTest(ve.errorEA, 4, 4)
NonLinearityTest(ve.errorJP, S=4, method="MARTENS")
NonLinearityTest(ve.errorRU, S=4, method="MARTENS")
NonLinearityTest(ve.errorUK, S=4, method="MARTENS")
NonLinearityTest(ve.errorUK, S=3, method="MARTENS")
source('~/R-Projects/TAR/mytar4.R')
rm(NonLinearityTest())
rm(NonLinearityTest
)
source('~/R-Projects/TAR/mytar4.R')
testLinearity(ve.errorEA)
source('~/R-Projects/TAR/mytar4.R')
testLinearity(ve.errorEA)
layout()
source('~/R-Projects/TAR/mytar4.R')
df.tStatsEA <- testLinearity(ve.errorEA)
source('~/R-Projects/TAR/mytar4.R')
df.tStatsEA <- testLinearity(ve.errorEA)
source('~/R-Projects/TAR/mytar4.R')
df.tStatsEA <- testLinearity(ve.errorEA)
View(df.tStatsEA)
rm(clearTarWS())
rm(clearTarWS)
clear <- function() {
rm(p, ve.y, N, df.y, ve.fStat, S, method, d)
}
test <- matrix(nrow = 5, ncol = 1)
rm(test)
ma.layout <- matrix(nrow = ncol(df.data) - 1, ncol = 1)
ma.layout <- matrix(nrow = ncol(df.tStatsEA) - 1, ncol = 1)
plot(df.tStatsEA[, 1], df.tStatsEA[, 2])
plot(df.tStatsEA[, 1], df.tStatsEA[, 3])
ma.layout <- matrix(nrow = ncol(df.tStatsEA) - 1, ncol = 1, data = seq(1:ncol(ddf.tStatsEA)-1))
ma.layout <- matrix(nrow = ncol(df.tStatsEA) - 1, ncol = 1, data = seq(1:ncol(df.tStatsEA)-1))
ma.layout <- matrix(nrow = ncol(df.tStatsEA) - 1, ncol = 1, data = seq(1:(ncol(df.tStatsEA)-1)))
plot(df.tStatsEA[, 1], df.tStatsEA[, 2])
plot(df.tStatsEA[, 1], df.tStatsEA[, 3])
source('~/R-Projects/TAR/multiplot.R')
mat <- matrix(c(1,2,0,3), 2)
mat <- matrix(c(1,2,0,3), 4)
mat <- matrix(c(1,2,0,3,5), 4)
rm(mat, ma.layout)
rm(x,y)
df.data <- df.tStatsEA
ve.positions <- seq(0:(ncol(df.data) - 1))
ve.positions <- seq(0, (ncol(df.data) - 1))
ma.layout <- matrix(ve.positions, 1)
ma.layout
ma.layout <- matrix(ve.positions, length(ve.positions))
ma.layout
?layout
layout(ma.layout)
plot(df.data[, 1], df.data[, 2])
par(mar=c(0.5, 4.5, 0.5, 0.5))
plot(df.data[, 1], df.data[, 2])
par(mar=c(4.5, 4.5, 0.5, 0.5))
plot(df.data[, 1], df.data[, 3])
?mar
?par
par(mar=c(14.5, 4.5, 0.5, 0.5))
plot(df.data[, 1], df.data[, 3])
par(4, 1)
par(mfrow = c(4, 1))
plot(df.data[, 1], df.data[, 2])
par(mar=c(0.5, 4.5, 0.25, 0.25))
plot(df.data[, 1], df.data[, 2])
par(mar=c(0.5, 4.5, 0.25, 0.25))
plot(df.data[, 1], df.data[, 3])
par(mar=c(4.5, 4.5, 0.5, 0.5))
plot(df.data[, 1], df.data[, 3])
par(mar=c(0.5, 4.5, 0.25, 0.25))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(0.5, 4.5, 0.25, 0.25))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
plot(df.data[, 1], df.data[, 2])
par(mar=c(0.1, 0.1, 0.1, 0.1))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(0.15, 0.15, 0.15, 0.15))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(0.25, 0.25, 0.25, 0.25))
plot(df.data[, 1], df.data[, 2])
par(mar=c(2.25, 2.25, 2.25, 2.25))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(2.25, 2.25, 2.25, 2.25))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(1, 2, 3, 4))
plot(df.data[, 1], df.data[, 2])
dev.off()
par(mfrow = c(4, 1))
par(mar=c(1, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
par(mfrow = c(4, 1))
par(mar=c(2, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
par(mfrow = c(1, 1))
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 3])
par(mfrow = c(1, 1))
par(mar=c(2, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
par(mar=c(2.5, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
par(mar=c(3.5, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
par(mar=c(4.5, 2, 1, 2))
plot(df.data[, 1], df.data[, 2])
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(df.data[, 1], df.data[, 2])
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.tStatsEA)
par(mfrow = c((ncol(df.data) - 1), 1))
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(df.data[, 1], df.data[, 2])
par(mar=c(2.1, 4.1, 4.1, 2.1))
par(mar=c(2.1, 4.1, 4.1, 2.1))
plot(df.data[, 1], df.data[, 2])
par(mar=c(5.1, 4.1, 4.1, 2.1))
plot(df.data[, 1], df.data[, 2])
par(mar=c(0.5, 4.5, 0.5, 0.5))
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
plot(df.data[, 1], df.data[, 2])
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
par(mfrow = c(1, 1))
mj.plot(series)
mj.plot(ve.series)
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
?par
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
source('~/R-Projects/TAR/myScripts.R')
mj.multiPlot(df.data)
rm(df.z, ma.layout, df.data)
df.tStatsJP <- testLinearity(ve.errorJP)
mj.multiPlot(df.tStatsJP)
df.tStatsRU <- testLinearity(ve.errorRU)
mj.multiPlot(df.tStatsRU)
df.tStatsUK <- testLinearity(ve.errorUK)
mj.multiPlot(df.tStatsUK)
##------ 09. Nov. 2015, 20:09:20 ------##
rm(ve.y)
testLinearity(ve.errorRU, stationary=TRUE)
testLinearity(ve.errorRU, stationary=TRUE)
testLinearity(ve.errorRU, stationary=TRUE)
test
testLinearity(ve.errorJP, stationary = TRUE)
a<-1
##------ 09. Nov. 2015, 21:30:04 ------##
a
a<-3
save("TAR.RData")
save.image()
save.image(file = "TAR.RData")
q()
##------ 10. Nov. 2015, 16:06:16 ------##
test
df.arEA <- getAR(ve.errorEA, 4)
lm.arEA <- lm(ve.y ~ ., data = df.arEA)
summary(lm.arEA)
summary(lm.arEA)[, 1]
summary(lm.arEA)$estimates
lm.arEA$coefficients
summary(lm.arEA)$coefficients
summary(lm.arEA)$coefficients[, 3]
lm.arEA$coefficients
lm.arEA$coefficients == summary(lm.arEA)$coefficients[, 1]
rm(df.arEA)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
rm(df.scatterJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
rm(getTStats)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP)
lm.arEA
lm.arEA_noconstant <- lm(ve.y ~ ., data=df.arEA)
df.arEA <- getAR(ve.errorJP, 4)
lm.arEA_noconstant <- lm(ve.y ~ ., data=df.arEA)
lm.arEA_noconstant
lm.arEA_noconstant <- lm(ve.y ~ -1., data=df.arEA)
lm.arEA_noconstant
lm.arEA_noconstant <- lm(ve.y ~ .-1, data=df.arEA)
lm.arEA_noconstant
summary(lm.arEA_noconstant)
df.scatterJP <- testLinearity(ve.errorJP)
df.scatterJP <- testLinearity(ve.errorJP, constant=TRUE)
df.scatterJP <- testLinearity(ve.errorJP, constant=TRUE)
df.scatterJP <- testLinearity(ve.errorJP, constant=TRUE)
df.scatterJP <- testLinearity(ve.errorJP, constant=FALSE)
##------ 12. Nov. 2015, 02:20:08 ------##
list.test <- list(ve.errorJP, df.tStatsJP)
list.test
list.test$ve.errorJP
list.test[1]
list.test[2]
names(list.test)
q()
##------ 12. Nov. 2015, 17:49:45 ------##
##------ 13. Nov. 2015, 08:30:01 ------##
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
rm(list.test)
?q
q(save="yes")
##------ 13. Nov. 2015, 08:36:19 ------##
a <- 3
q()
##------ 13. Nov. 2015, 08:36:54 ------##
rm(a)
rm(mj.multiPlot)
mj.multiplot(list.JP, from=2, to=4)
mj.multiplot(list.JP)
mj.multiplot(list.JP, from=2, to=5)
mj.multiplot(list.JP, from=2, to=6)
mj.multiplot(list.JP, from=2, to=6)
?plot
mj.multiplot(list.JP, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
names(list.JP$df.scatterDecreasing)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=5)
mj.multiplot(list.JP$df.scatterDecreasing, from=6, to=9)
list.JP <- testLinearity(ve.errorJP, constant ) TRUE
list.JP <- testLinearity(ve.errorJP, constant = TRUE)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
mj.multiplot(list.JP$df.scatterDecreasing, from=7, to=11)
mj.multiplot(list.JP$df.scatterDecreasing, from=2, to=6)
q()
##------ Nov 14, 2015, 9:42:00 AM ------##
##------ Nov 14, 2015, 7:47:52 PM ------##
list.JP <- testLinearity(ve.errorJP, constant = TRUE)
mj.multiplot(list.JP$df.scatterDecreasing, from = 2, to = 6)
mj.multiplot(list.JP$df.scatterDecreasing, from = 7, to = 11)
mj.multiplot(list.JP$df.scatterIncreasing, from = 7, to = 11)
mj.multiplot(list.JP$df.scatterIncreasing, from = 2, to = 6)
##------ Nov 14, 2015, 10:28:23 PM ------##
max(list.JP$df.scatterDecreasing[,2:6])
which.max(list.JP$df.scatterDecreasing[,2:6])
min(list.JP$df.scatterDecreasing[,2:6])
plot
?plot
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], ylim=c(-5.5, 27.2)))
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], ylim=c(-5.5, 27.2))
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], ylim=c(-5.5, 27.2))
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
?plot
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
min(list.JP$df.scatterDecreasing[,2:6])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.lines(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3])
}
}
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3])
mj.plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3])
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3], ylim=c(-6, 27))
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3], ylim=c(-6, 27), type="b")
lines(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 2], type="b")
lines(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 3], type="b")
lines(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 4], type="b")
lines(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 5], type="b")
lines(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 6], type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,6], ylim=c(-6, 27), type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,5], ylim=c(-6, 27), type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,4], ylim=c(-6, 27), type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,3], ylim=c(-6, 27), type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], ylim=c(-6, 27), type="b")
max(list.JP$df.scatterDecreasing[, 2:6])
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], ylim=c(-6, 27), type="b")
plot(list.JP$df.scatterDecreasing[,1] ~ list.JP$df.scatterDecreasing[,2], type="b")
plot(list.JP$df.scatterDecreasing[,2] ~ list.JP$df.scatterDecreasing[,1], type="b")
max(list.JP$df.scatterDecreasing[, 1])
min(list.JP$df.scatterDecreasing[, 1])
plot(list.JP$df.scatterDecreasing[,3] ~ list.JP$df.scatterDecreasing[,1], type="b")
lines(list.JP$df.scatterDecreasing[,2] ~ list.JP$df.scatterDecreasing[,1], type="b")
lines(list.JP$df.scatterDecreasing[,2], type="b")
lines(list.JP$df.scatterDecreasing[,5], type="b")
##------ Nov 15, 2015, 10:34:46 AM ------##
mean(ve.errorJP)
mj.plot(ve.errorJP, type="b")
install.packages("TSA")
##------ Nov 18, 2015, 4:25:36 PM ------##
d = expand.grid(x = A, y = B, z = C)
d <-  expand.grid(x = A, y = B, z = C)
expand.grid(A, B, C)
A <- seq(1, 10)
B <- seq(2, 11)
C <- seq(15,25)
d <- expand.grid(A, B, C)
d
ve.candidates <- c(200, 300)
rm(d)
getCandidates(200)
getCandidates(200)
getCandidates(200)
getCandidates(200)
getCandidates(200)
getCandidates(200)
getCandidates(ve.candidates)
install.packages("doMC")
?foreach
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
registerDoParallel()
install.packages("doParallel")
library(doParallel)
RegisterDoMC
RegisterDoMC()
registerDoParallel
registerDoParallel()
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
getDoParWorkers()
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
?rbind.data.frame
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
candi[1]
candi[2]
candi[2][1]
candi[2, 1]
candi[[2]]
candi[[2]][1]
df.cartesian <- expand.grid(candi)
candi <- getThresholds(ve.candidates = ve.candidates)
candi <- getThresholds(ve.candidates = ve.candidates)
rm(df.cartesian)
df.cartesian <- expand.grid(candi)
rm(candi, df.cartesian)
df.cart <- getThresholds(ve.candidates)
ve.candidates <- c(ve.candidates, 150)
df.cart <- getThresholds(ve.candidates)
ve.candidates <- c(ve.candidates, 50)
df.cart <- getThresholds(ve.candidates)
df.cart[1,]
mj.multiplot(list.JP$df.scatterDecreasing[, 10] ~ list.JP$df.scatterDecreasing[, 1])
mj.multiplot(list.JP$df.scatterDecreasing[, 1], from = 10, to = 10)
list.JP <- testLinearity(ve.series, constant = FALSE)
list.JP <- testLinearity(ve.series, constant = FALSE)
list.JP <- testLinearity(ve.series, constant = TRUE)
list.JP <- testLinearity(ve.series, verbose = TRUE)
list.JP <- testLinearity(ve.errorJP, verbose = TRUE)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
which(list.JP$df.scatterDecreasing[, 1] > -0.19 & list.JP$df.scatterDecreasing[, 1] < -0.16)
points(list.JP$df.scatterDecreasing[326, 1], list.JP$df.scatterDecreasing[326, 1], pch = 3)
points(list.JP$df.scatterDecreasing[326, 1], list.JP$df.scatterDecreasing[326, 1], pch = 3, col = 2)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 1], pch = 3, col = 2)
list.JP$df.scatterDecreasing[326, 1]
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 1], pch = 7, col = 2)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 7, col = 2)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 7, col = 3)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 3, col = 2)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 3, col = 2)
q()
##------ Nov 20, 2015, 11:00:32 AM ------##
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 3, col = 2)
getCandidatesIndex(326)
getCandidatesIndex(326)
rm(getCandidates)
rm(getCandidatesIndex())
rm(getCandidatesIndex)
getCandidates(326)
list.JP$df.scatterDecreasing[getCandidates(326), 1]
rm(getCandidates())
rm(getCandidates)
getGridIndices(326)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(x = list.JP$df.scatterDecreasing[326, 1], y = list.JP$df.scatterDecreasing[326, 10], pch = 3, col = 2)
which(list.JP$df.scatterDecreasing[, 1] < -0.05 & list.JP$df.scatterDecreasing[, 1] > -0.08)
which(list.JP$df.scatterDecreasing[, 1] < -0.05 & list.JP$df.scatterDecreasing[, 1] > -0.07)
which(list.JP$df.scatterDecreasing[, 1] < -0.06 & list.JP$df.scatterDecreasing[, 1] > -0.07)
points(x = list.JP$df.scatterDecreasing[230, 1], y = list.JP$df.scatterDecreasing[230, 10], pch = 3, col = 2)
points(x = list.JP$df.scatterDecreasing[231, 1], y = list.JP$df.scatterDecreasing[231, 10], pch = 3, col = 2)
points(x = list.JP$df.scatterDecreasing[232, 1], y = list.JP$df.scatterDecreasing[232, 10], pch = 3, col = 2)
ve.indices <- c(326, 232)
ve.indices
df.gridIndices <- foreach(i = 1:length(ve.indices), .combine = cbind.data.frame) %do% {
getGridIndices(ve.indices[i])
}
df.gridIndices <- foreach(i = 1:length(ve.indices), .combine = cbind.data.frame) %do% {
getGridIndices(ve.indices[i])
}
rm(df.cart)
d <- 2
ve.thresholdLag <- list.JP$df.scatterDecreasing[, 1]
ve.thresholdLag[df.cartesian[1, ]]
ve.thresholdLag[df.cartesian[1, 1]]
ve.thresholdLag[df.cartesian[1, 2]]
ve.thresholdLag[df.cartesian[1, 3]]
ve.indices
which(df.AR[, 2]) == list.JP$df.scatterDecreasing[326, 1]
which(df.AR[, 2] == list.JP$df.scatterDecreasing[326, 1])
list.JP$df.scatterDecreasing[326, 1]
which(df.AR[, 3] == list.JP$df.scatterDecreasing[326, 1])
df.AR <- getAR(ve.errorJP, p = getOptimalLagOrder(ve.series, verbose = FALSE))
rm(ve.series)
which(df.AR[, 3] == list.JP$df.scatterDecreasing[326, 1])
plot(df.ordered[, 3])
which(df.ordered[, 3] == list.JP$df.scatterDecreasing[326, 1])
list.JP$df.scatterDecreasing[326, 1]
getRange(326, list.JP$df.scatterDecreasing[, 1])
getRange(326, list.JP$df.scatterDecreasing[, 1], df.ordered[, 3])
which(df.ordered[, 3] == list.JP$df.scatterDecreasing[326, 1])
getRange(326, list.JP$df.scatterDecreasing[, 1], df.ordered[, 3])
getRange(326, list.JP$df.scatterDecreasing[, 1], df.ordered[, 3])
getRange(ve.indices[1], list.JP$df.scatterDecreasing[, 1], df.ordered[, 3])
getRange(ve.indices[2], list.JP$df.scatterDecreasing[, 1], df.ordered[, 3])
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20)
ve.indices
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20, decreasing = FALSE)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20, decreasing = TRUE)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20, decreasing = FALSE)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalLength = 20, decreasing = TRUE)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalSize = 20, decreasing = TRUE)
df.ordered <- 5
df.ordered <- data.frame(5)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalSize = 20, decreasing = TRUE)
df.cartesian <- getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, intervalSize = 20, decreasing = FALSE)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
plot(list.JP$df.scatterDecreasing[, 1] ~ list.JP$df.scatterDecreasing[, 10])
plot(list.JP$df.scatterDecreasing[, 10] ~ list.JP$df.scatterDecreasing[, 1])
plot(list.JP$df.scatterDecreasing[, 10] ~ list.JP$df.scatterDecreasing[, 1], type="b")
plot(rev(list.JP$df.scatterDecreasing[, 10]) ~ rev(list.JP$df.scatterDecreasing[, 1]), type="b")
list.JP$df.scatterDecreasing[1, 10]
rev(list.JP$df.scatterDecreasing[1, 10])
rev(list.JP$df.scatterDecreasing[1, 10])[1]
list.JP$df.scatterDecreasing[1, 10]
a <- seq(1, 10)
a
a[1]
rev(a)
rev(a)[1]
a[1]
ve.series <- ve.errorJP
decreasing <- FALSE
d
ve.thresholdLag
decreasing
 decreasing <- TRUE
)
head(ve.thresholdLag)
rm(getGridIndices())
rm(getGridIndices)
getMappedIndex(ve.indices[1], ve.thresholdLag, df.ordered[, (d + 1)])
ve.indices
which(ve.domain[326] == ve.thresholdLag)
ve.domain[326]
domain <- 326
ve.thresholdLag[326]
list.JP <- testLinearity(ve.errorJP, constant = FALSE)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(list.JP$df.scatterDecreasing[37, 1], list.JP$df.scatterDecreasing[37, 10])
points(list.JP$df.scatterDecreasing[36, 1], list.JP$df.scatterDecreasing[36, 10], pch = 3, col = 2)
points(list.JP$df.scatterDecreasing[128, 1], list.JP$df.scatterDecreasing[128, 10], pch = 3, col = 2)
ve.indices <- c(36, 128)
getMappedIndex(ve.indices[1], list.JP$df.scatterDecreasing[, 1], df.ordered[, (d+1)])
getMappedIndex(ve.indices[2], list.JP$df.scatterDecreasing[, 1], df.ordered[, (d+1)])
nrow(df.ordered)
list.JP$df.scatterDecreasing[36, 1]
df.ordered[37, (d + 1)]
df.ordered[37, ]
ncol(df.cartesian)
ve.cartesianColumnIndices <- seq(from = 1, to = ncol(df.cartesian))
rm(ve.cartesianColumnIndices)
ve.cartesianColumnIndices <- seq(from = 1, to = ncol(df.cartesian))
df.cartesian[1, ve.cartesianColumnIndices]
ve.splits <- df.cartesian[1, ve.cartesianColumnIndices]
ve.splits
length(ve.splits)
df.test <- getModelndices(ve.splits, nrowCartesian)
df.test <- getModelndices(ve.splits, nrowCartesian)
df.test <- getModelndices(ve.splits, nrowCartesian)
df.test <- getModelndices(ve.splits, nrowCartesian)
df.test
df.test <- getModelndices(ve.splits, nrowCartesian)
seq(from = ve.splits[1], to = ve.splits[1 + 1])
ve.splits
seq(from = 1, to = 27)
seq(from = ve.splits[1], to = 27)
seq(from = as.numeric(ve.splits[1]), to = 27)
df.test <- getModelndices(ve.splits, nrowCartesian)







df.test <- getModelndices(ve.splits, nrowCartesian-1)
df.test <- getModelndices(ve.splits, total = nrowCartesian-1)
df.test <- getModelndices(ve.splits, total = nrowCartesian-1)
df.test <- getModelndices(ve.splits, total = nrowCartesian-1)
ve.splits <- as.numeric(unlist(c(1, ve.splits, nrowCartesian)))
ve.splits
str(ve.splits)
ve.splits[1]
ve.splits[4]
df.test <- getModelndices(ve.splits, total = nrowCartesian-1)
df.test <- getModelndices(ve.splits, total = nrowCartesian-1)
ve.splits <- df.cartesian[1, ve.cartesianColumnIndices]
ve.splits
df.test <- getModelIndices(ve.splits, nrowCartesian)
df.test <- getModelIndices(ve.splits, nrowCartesian)
ve.splits
total
total <- nrowCartesian
df.test <- getModelIndices(ve.splits, nrowCartesian)
ve.splits
ve.splits
length(ve.splits)-1
seq(from = ve.splits[1], to = ve.splitsp[2])
seq(from = ve.splits[1], to = ve.splits[2])
seq(from = ve.splits[2], to = ve.splits[3])
seq(from = ve.splits[3], to = ve.splits[4])
ve.splits
rm(ve.splits)
ve.splits <- df.cartesian[1, ve.cartesianColumnIndices]
ve.splits
ve.splits
i <- 1
i <- 2
i <- 3
ve.splits <- df.cartesian[1, ve.cartesianColumnIndices]
ve.splits
list.test <- getModelIndices(ve.splits, nrowCartesian)
rm(getModelndices)
rm(df.test)
rm(a, A, B, C, decreasing)
rm(domain)
rm(df.AR)
rm(getModelIndices())
rm(getModelIndices)
rm(lag)
rm(i)
df.ordered[list.test[[1]]]
df.ordered[list.test[[1]],]
ve.splits
df.cartesian[1, ] == df.cartesian[1, ve.cartesianColumnIndices]
rm(ve.cartesianColumnIndices)
length(list.test)
ncol(df.cartesian)
lm(ve.y ~ ., data=df.ordered[list.test[1]])
lm(ve.y ~ ., data=df.ordered[list.test[[1]]])
lm(ve.y ~ ., data=df.ordered[list.test[[1]], ])
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))[1]
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))$RSquared
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))$residuals
?summary
df.summary <- summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))$residuals
df.summary <- summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))r.squared
summary(lm(ve.y ~ ., data=df.ordered[list.test[[1]], ]))$r.squared
numberRegimes
nrowCartesian
i <- 1
ve.splits
list.RegimeIndices
j <- 1
sumRSquared
j <- 2
sumRSquared <- sumRSquared + summary(lm(ve.y ~ ., data = df.ordered[list.test[[j]], ]))$r.squared
sumRSquared
j <- 3
sumRSquared <- sumRSquared + summary(lm(ve.y ~ ., data = df.ordered[list.test[[j]], ]))$r.squared
sumRSquared
sumRSquared
sumRSquared <- 0
sumRSquared
ve.splits
ve.splits <- df.cartesian[2, ]
ve.splits
rm(list.RegimeIndices)
list.regimeIndices
j <- 1
sumRSquared <- sumRSquared + summary(lm(ve.y ~ ., data = df.ordered[list.test[[j]], ]))$r.squared
sumRSquared
sumRSquared <- 0
sumRSquared <- sumRSquared + summary(lm(ve.y ~ ., data = df.ordered[list.test[[j]], ]))$r.squared
sumRSquared
which.max(ve.sumRSquared)
plot(ve.sumRSquared)
plot(ve.sumRSquared, type="b")
df.cartesian[which.max(ve.sumRSquared),]
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=3, col=2)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=3, col=2)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=7, col=2)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=7, col=3)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=7, col=3)
mj.multiplot(list.JP$df.scatterDecreasing[, 1], from = 10, to = 10)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=7, col=3)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=7, col=2)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=3, col=2)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=3, col=2)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=7, col=2)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=16, col=2)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=16, col=2)
mj.multiplot(list.JP$df.scatterDecreasing, from = 10, to = 10)
points(list.JP$df.scatterDecreasing[47, 1], list.JP$df.scatterDecreasing[47, 10], pch=16, col=2)
points(list.JP$df.scatterDecreasing[140, 1], list.JP$df.scatterDecreasing[140, 10], pch=16, col=2)
ve.splits
ve.indices
getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, 30)
getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, 30)
31^31
31^2
ve.indices
ve.indices <- c(40, 140)
getThresholds(ve.errorJP, list.JP$df.scatterDecreasing[, 1], ve.indices, 2, 30)
##------ Nov 23, 2015, 6:46:38 AM ------##
rm(A,B,C)
rm(df.tStatsEA, df.tStatsJP, df.tStatsRU, df.tStatsUK)
rm(df.cart)
rm(ve.series)
q()
##------ Nov 26, 2015, 4:22:38 PM ------##
n
head(list.JP1$df.scatterIncreasing[, 1])
head(list.JP2$df.scatterIncreasing[, 1])
head(list.JP$df.scatterIncreasing[, 1])
list.JP <- testLinearity(ve.errorJP, verbose = TRUE)
head(list.JP$df.scatterIncreasing[, 1])
list.JP <- testLinearity(ve.errorJP, verbose = TRUE)
list.JP1 <- testLinearity(ve.errorJP, ve.S = 1, verbose = TRUE)
list.JP2 <- testLinearity(ve.errorJP, ve.S = 2, verbose = TRUE)
head(list.JP$df.scatterIncreasing[, 1])
head(list.JP1$df.scatterIncreasing[, 1])
head(list.JP2$df.scatterIncreasing[, 1])
df.arJP <- getAR(ve.errorJP)
df.orderedJP <- df.arJP[order(df.arJP[, 3]), ]
df.orderedJP <- df.arJP[order(df.arJP[, 3], decreasing = FALSE), ]
head(list.JP$df.scatterIncreasing[, 2])
head(list.JP1$df.scatterIncreasing[, 2])
head(list.JP2$df.scatterIncreasing[, 2])
which(list.JP1$df.scatterIncreasing[, 1] != list.JP2$df.scatterIncreasing[, 1])
which(list.JP1$df.scatterIncreasing[, 1] == list.JP2$df.scatterIncreasing[, 1])
df.orderedJP2 <- df.arJP[order(df.arJP[, 2], decreasing = FALSE), ]
df.orderedJP3 <- df.arJP[order(df.arJP[, 3], decreasing = FALSE), ]
which(df.arJP[1, 1] == df.arJP[, 2])
which(df.arJP[2, 1] == df.arJP[, 2])
which(df.arJP[1, 2] == df.arJP[, 1])
df.arJP[1, 2]
which(df.orderedJP2[, 2] != df.orderedJP3[, 3])
plot(df.ordered[JP2[, 2]])
plot(df.orderedJP2[, 2]])
plot(df.orderedJP2[, 2])
plot(df.orderedJP2[, 2], type = "l")
mj.plot(df.orderedJP2[, 2], type = "l")
mj.lines(df.orderedJP3[, 3])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.lines(list.JP2$df.scatterIncreasing[, 2])
mj.lines(list.JP$df.scatterIncreasing[, 2])
mj.lines(list.JP1$df.scatterIncreasing[, 2])
which(list.JP1$df.scatterIncreasing[, 2] != list.JP2$df.scatterIncreasing[, 2])
list.JP3 <- testLinearity(ve.errorJP, ve.S = 3, verbose = TRUE)
mj.lines(list.JP3$df.scatterIncreasing[, 2])
mj.lines(list.JP3$df.scatterIncreasing[, 2])
list.JP3 <- testLinearity(ve.errorJP, ve.S = 3, verbose = TRUE)
mj.lines(list.JP3$df.scatterIncreasing[, 2])
list.JP2 <- testLinearity(ve.errorJP, ve.S = 2, verbose = TRUE)
mj.lines(list.JP3$df.scatterIncreasing[, 2])
mj.lines(list.JP2$df.scatterIncreasing[, 2])
mj.lines(list.JP2$df.scatterIncreasing[, 2])
list.JP1 <- testLinearity(ve.errorJP, ve.S = 1, verbose = TRUE)
mj.lines(list.JP1$df.scatterIncreasing[, 2])
mj.lines(list.JP1$df.scatterIncreasing[, 2])
mj.lines(list.JP1$df.scatterIncreasing[, 2])
mj.lines(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
list.JP4 <- testLinearity(ve.errorJP, ve.S = 4, verbose = TRUE)
mj.lines(list.JP2$df.scatterIncreasing[, 2])
mj.lines(list.JP3$df.scatterIncreasing[, 2])
mj.lines(list.JP4$df.scatterIncreasing[, 2])
rm(df.orderedJP, df.orderedJP2, df.orderedJP3)
q()
##------ Nov 27, 2015, 10:51:11 AM ------##
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
points(50)
points(50, 0.92)
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2])
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 50)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = R^2 1)
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "R^2 1")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "RSquared")
mj.plot(list.JP1$df.scatterIncreasing[, 2], new = TRUE, interval = 0, name = "RSquared")
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP$list.scatter[1]
list.JP$list.scatter[11]
list.JP$list.scatter[[1]]
list.JP$list.scatter[[1]][1]
list.JP$list.scatter[[1]][1]
list.JP <- testLinearity(ve.errorJP)
rm(list.JP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
rm(list.JP1, list.JP2, list.JP3, list.JP4)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
?assign
x <- 5
assign(paste"x", "2", sep=""), 5)
assign(paste("x", "2", sep=""), 5)
x
assign(paste("x", "1", sep=""), 5)
x
x1
rm(x, x1)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
i
 <- 3i
i <- 3
paste("schwanz",i, sep="")
rm(i)
names(listJP)
names(list.JP)
names(list.JP$list.scatterAll)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
rm(list.JP)
list.JP <- testLinearity(ve.errorJP)
names(list.JP[1])
names(list.JP[1]) <- paste("fut", 1, sep = "")
names(list.JP[1])
names(list.JP[1])
names(list.JP[1]) <- "hi"
names(list.JP[1])
names(list.JP[[1]])
names(list.JP$ve.series)
names(list.JP$ve.series)[1]
names(list.JP)[1]
names(list.JP)[1] <- "huhu"
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing2[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing3[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing3[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing4[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing4[, 2])
200^3
200^2
24000000/120000
200*6
/60
1200/60
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
d
d <- 2
ve.thresholdLag <- as.numeric(list.JP$list.scatterAll[(d * 2) - 1])
head(list.JP$list.scatterAll[(d * 2) - 1])
list.JP$list.scatterAll[[1]][1]
getThresholds(list.JP, ve.indices = 3)
getThresholds(list.JP, ve.indices = 3)
ve.thresholdLag <- list.JP$list.scatterAll[[(d * 2) - 1]][1]
list.data <- testLinearity(ve.errorJP)
d <- -1
if (d == -1) d <- list.data$dMax
d
ve.thresholdLag <- list.data$list.scatterAll[[(d * 2) - 1]][1]
df.AR <- getAR(list.data$ve.series, p = getOptimalLagOrder(list.data$ve.series, verbose = FALSE))
df.ordered <- df.AR[order(df.AR[, (d + 1)]), ]
ve.indices <- 200
length(ve.indices)
intervalSize <- 30
df.gridIndices <- getRangeIndices(getMappedIndex(ve.indices[1], ve.thresholdLag, df.ordered[, (d + 1)]), intervalSize)
ve.indices <- 150
df.gridIndices <- getRangeIndices(getMappedIndex(ve.indices[1], ve.thresholdLag, df.ordered[, (d + 1)]), intervalSize)
getMappedIndex(ve.indices[1], ve.thresholdLag, df.ordered[, (d + 1)]), intervalSize)
getMappedIndex(200, ve.thresholdLag, df.ordered[, (d+1)])
ncol(df.ordered)
head(df.ordered[, (d+1)])
head(ve.thresholdLag)
ve.thresholdLag[200]
length(ve.thresholdLag)
ve.thresholdLag <- list.data$list.scatterAll[[(d * 2) - 1]][1]
head(list.data$list.scatterAll[[(d * 2) - 1]][1])
head(as.numeric(list.data$list.scatterAll[[(d * 2) - 1]][1]))
head(list.data$list.scatterAll[[(d * 2) - 1]][1])[1]
ve.thresholdLag <- list.JP$list.scatterAll$df.scatterIncreasing1$ve.thresholdLag
list.JP$list.scatterAll$df.scatterIncreasing1$ve.thresholdLag
list.JP$list.scatterAll[[[1]]]
list.JP$list.scatterAll[[1]]
list.JP$list.scatterAll[[1]][1]
str(list.JP$list.scatterAll[[1]][1])
ve.thresholdLag <-  list.JP$list.scatterAll[[1]][1]
ve.thresholdLag <-  list.JP$list.scatterAll[[1]][1][1]
head(list.JP$list.scatterAll[[1]][1][1])
rm(ve.thresholdLag)
ve.thresholdLag <- list.JP$list.scatterAll[[1]][1][1]
str(ve.thresholdLag)
names(list.JP$list.scatterAll)
list.JP$list.scatterAll[[1]] == list.JP$list.scatterAll[1]
names(list.JP$list.scatterAll[[1]])
str(list.JP$list.scatterAll[[1]])
list.JP$list.scatterAll[[1, 1]]
list.JP$list.scatterAll[[1]][1]
head(list.JP$list.scatterAll[[1]][1, 1])
head(list.JP$list.scatterAll[[1]][, 1])
ve.thresholdLag <- list.JP$list.scatterAll[[1]][, 1]
x <- getThresholds(list.data, ve.indices=100)
x
x <- getThresholds(list.data, ve.indices=c(100,300), range=30)
x <- getThresholds(list.data, ve.indices=c(100,300), intervalSize=30)
x
q()
##------ Nov 28, 2015, 9:36:06 AM ------##
mj.plot(list.JP$list.scatterAll$df.scatterIncreasing1[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing3[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing4[, 2])
mj.lines(list.JP$list.scatterAll$df.scatterIncreasing3[, 2])
mj.plot(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], col = 0)
mj.plot(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], col = 0)
ve.series <- list.JP$ve.series
str(ve.series)
ve.series <- as.numeric(list.JP$ve.series)
str(ve.series)
which(list.JP == ls(pattern = "^decreasing"))
which(list.JP$list.scatterAll == ls(pattern = "^decreasing"))
which(list.JP$list.scatterAll == ls(pattern = "^Decreasing"))
find("decreasing", where = TRUE)
find("decreasing")
find("list")
length(list.JP$list.scatterAll)
length(list.JP[[5]])
list.JP <- testLinearity(ve.errorJP)
list.JP$N - list.JP$m
list.JP$N - list.JP$m - list.JP$p
list.JP$N - list.JP$m - list.JP$p + 1
list.JP <- testLinearity(ve.errorJP)
1 %% 2
2 %% 2
ve.series <- ve.errorJP
p <- 4
S <- 1
m <- -1
stationary = TRUE
verbose = FALSE
ve.S <- 1
ve.FStats
dMax
i <- 1
constant = FALSE
decreasing
 decreasing = FALSE
d
n
m
n
i <- m
lm.regime
m
m+361
m-1 + 361
testIncr <- c(rep(0, p+m-1), df.scatterIncreasing[, 2])
testDecr <- c(df.scatterDecreasing[, 2], rep(0, p+m-1))
length(testIncr == testDecr)
(testIncr == testDecr)
(length(testIncr) == length(testDecr))
mj.lines(testDecr)
mj.lines(testIncr)
testDecr <- c(rep(0, p+m-1), df.scatterDecreasing[, 2])
testIncr <- c(df.scatterIncreasing[, 2], rep(0, p+m-1))
mj.plot(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], col = 0)
mj.lines(testDecr)
mj.lines(testIncr)
mj.lines(testIncr)
mj.lines(testIncr)
mj.lines(testIncr)
mj.lines(testIncr)
mj.lines(testIncr)
mj.plot(ve.errorJP, col = 0)
testIncr <- c(rep(0, p+m-1), df.scatterIncreasing[, 2])
testDecr <- c(df.scatterIncreasing[, 2], rep(0, p+m-1))
mj.plot(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], col = 0)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0, p+m-1)), col = 0)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.95, p+m-1)), col = 0)
mj.lines(testIncr)
mj.lines(testDecr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.95, p+m-1)), col = 0)
testDecr <- c(df.scatterDecreasing[, 2], rep(0, p+m-1))
testIncr <- c(rep(0, p+m-1), df.scatterIncreasing[, 2])
mj.lines(testDecr)
mj.lines(testIncr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.95, p+m-1)), col = 0)
mj.lines(testIncr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.95, p+m-1)), col = 0)
mj.lines(testDecr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.967, p+m-1)), col = 0)
mj.lines(testDecr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.968, p+m-1)), col = 0)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.97, p+m-1)), col = 0)
mj.lines(testDecr)
mj.lines(testIncr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.97, p+m-1)), col = 0)
mj.lines(testIncr)
mj.lines(rev(testDecr))
testDecr <- c(rep(0, p+m-1), df.scatterDecreasing[, 2])
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.97, p+m-1)), col = 0)
mj.lines(rev(testDecr))
mj.lines(testIncr)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 1], rep(0.97, p+m-1)), col = 0)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 2], rep(0.97, p+m-1)), col = 2)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 1], rep(0.97, p+m-1)), col = 2)
mj.plot(c(rep(0.97, p+m-1), list.JP$list.scatterAll$df.scatterDecreasing1[, 1]), col = 2)
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 1], rep(0.97, p+m-1)), col = 2)
mj.lines(c(rep(0.97, p+m-1), list.JP$list.scatterAll$df.scatterDecreasing1[, 1]), col = 2)
mj.lines(c(rep(0.97, p+m-1), list.JP$list.scatterAll$df.scatterDecreasing1[, 1]))
mj.lines(c(rep(0.97, p+m-1), list.JP$list.scatterAll$df.scatterDecreasing1[, 1]))
mj.plot(c(list.JP$list.scatterAll$df.scatterIncreasing1[, 1], rep(0.97, p+m-1)), col = 0)
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61))
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61))
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61))
)
mj.plot(ve.series, col = 0)
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(0, 61)))
mj.lines(c(rep(0, 61), df.scatterIncreasing[, 1]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 1]))
mj.plot(ve.series, col = 0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 1]))
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61)))
mj.plot(c(rep(NA, 61), df.scatterIncreasing[, 1]))
mj.plot(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.plot(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
d
i
i <- 1
mj.plot(c(rep(NA, 61), df.scatterIncreasing[, 1]))
mj.plot(ve.series, col=0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 1]))
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61)))
mj.lines(c(df.scatterDecreasing[, 1], rep(NA, 61)))
?seq
mj.plot(seq(0, 1, by = 1/422), col = 0)
mj.plot(seq(0, 1, by = 1/421), col = 0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.plot(seq(0.9, 1, by = 1/421), col = 0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.plot(seq(0.9, 1, by = 1/421), col = 0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.plot(seq(0.9, 1, by = 1/42), col = 0)
mj.plot(seq(0.9, 1, by = 1/1000), col = 0)
mj.plot(seq(0.9, 1, by = 1/4210), col = 0)
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(rep(NA, 61), df.scatterIncreasing[, 2]))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
##------ Dec 1, 2015, 2:38:18 PM ------##
mj.lines(c(df.scatterDecreasing[, 2], rep(NA, 61)))
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
seq_len(5+4)
seq_len(5+4 - 2)
list.JP <- testLinearity(ve.errorJP)
list.JP <- testLinearity(ve.errorJP)
mj.plotList(list.JP, column = 2, ylim = c(0.91, 0.975), name = "RSquared") # RSquared
getRangeIndices(15)
getRangeIndices(15)
getThresholds(list.JP, ve.indices = c(100, 300))
getThresholds(list.JP, ve.indices = c(100, 300))
getThresholds(list.JP, ve.indices = c(100, 300), verbose = TRUE)
getThresholds(list.JP, ve.indices = c(100, 300), verbose = TRUE)
getThresholds(list.JP, ve.indices = c(100, 300), verbose = TRUE)
getThresholds(list.JP, ve.indices = c(106, 317), verbose = TRUE, intervalsize = 210)
system.time(getThresholds(list.JP, ve.indices = c(106, 317), verbose = TRUE, intervalSize = 210))
##------ Dec 1, 2015, 5:09:08 PM ------##
list.JP$dMax
d <- 2
ve.thresholdLag <- -1
list.data <- list.JP
length(ve.thresholdLag)
ve.indices
ve.indices <- c(106,317)
getRangeIndices(ve.indices[1], 30)
RSquared = TRUE
nrow(df.cartesian)
i <- 1
ve.splits
head(df.cartesian)
nrowCartesian
list.regimeIndices
list.JP <- testLinearity(ve.errorJP)
list.regimeIndices
ve.splits
ve.splits
list.regimeIndices
list.data$N - list.data$p
list.data <- list.JP
list.data$N - list.data$p
list.regimeIndices
numberRegimes
sumRSquared
i
i <- 2
ve.sumRSquared
which.max(ve.sumRSquared)
df.cartesian[which.max(ve.sumRSquared), ]
ve.bestRegime <- getThresholds(list.JP)
system.time(getThresholds(list.JP, ve.indices = c(106, 317), verbose = TRUE, intervalSize = 210))
422*.7
62+98+1+98+98+1+98+62
422*.7
298/2
62+74*4+2+62
62+74+1
137+74*2+1
system.time(getThresholds(list.JP, ve.indices = c(137, 286), verbose = TRUE, intervalSize = 148))
system.time(getThresholds(list.JP, ve.indices = 290, verbose = TRUE, intervalSize = 148))
system.time(getThresholds(list.JP, ve.indices = 290, verbose = TRUE, intervalSize = 148))
system.time(getThresholds(list.JP, ve.indices = 290, verbose = TRUE, intervalSize = 148))
points(354, 1.74209, pch = 19, col = 2)
points(1.74209, 354, pch = 19, col = 2)
points(0, 0.92, pch = 19, col = 2)
abline(v = 354,col = "cornflowerblue", lty = "dotted")
abline(v = 354,col = "cornflowerblue")
abline(v = 354,col = "cornflowerblue")
abline(v = 354,col = "cornflowerblue")
abline(v = 354,col = "cornflowerblue")
290+148
system.time(getThresholds(list.JP, ve.indices = 290, verbose = TRUE, intervalSize = 132))
abline(v = 290,col = "chartreuse")
abline(v = 290+132,col = "darkgreen")
abline(v = 290-132,col = "darkgreen")
abline(v = 290,col = "chartreuse")
abline(v = 290+132,col = "darkgreen")
abline(v = 290-132,col = "darkgreen")
abline(v = 354,col = "cornflowerblue")
q()
##------ Dec 1, 2015, 2:38:22 PM ------##
##------ Dec 2, 2015, 4:53:09 PM ------##
##------ Dec 2, 2015, 4:55:41 PM ------##
list.JP.Thresh <- getThresholds(list.JP, ve.indices = c(137, 286), intervalSize = 149)
list.JP.Thresh <- getThresholds(list.JP, ve.indices = c(137, 286), intervalSize = 149)
##------ Dec 2, 2015, 5:07:44 PM ------##
system.time(list.JP.Thresh <- getThresholds(list.JP, ve.indices = c(137, 286), intervalSize = 149))
system.time(list.JP.Thresh <- getThresholds(list.JP, ve.indices = c(137, 286), intervalSize = 149))
list.JP.Thresh$list.thresholds$df.cartesian[150,]
list.JP.Thresh$list.thresholds$df.cartesian[299,]
list.JP.Thresh$list.thresholds$df.cartesian[20101,]
list.JP.Thresh$list.thresholds$df.cartesian[145,]
abline(v = c(211,212,213), col = "cornflowerblue")
abline(v = c(211,212,213), col = "cornflowerblue")
abline(v = c(211,213), col = "cornflowerblue")
abline(v = c(212,212), col = 3)
abline(v = c(63,346), col = 2)
abline(v = c(207,212), col = 4)
346+62
rowMeans(head(df.AR))
0.2081034386+0.1467916472+0.0550768779+0.1062124894+0.1829010358
(0.2081034386+0.1467916472+0.0550768779+0.1062124894+0.1829010358)/5
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.SSR))
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.SSR), grid = FALSE)
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.SSR), interval = 0)
abline(v=20101, col = "cornflowerblue")
rowMeans(df.SSR[20101,])
rowMeans(list.JP.Thresh$list.thresholds$df.SSR[20101,])
mean(list.JP.Thresh$list.thresholds$df.SSR[20101,])
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.SSR), interval = 0)
points(20101, 0.146)
points(20101, 0.147)
points(20101, 0.1475)
points(20101, 0.1475, pch = 3)
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.SSR), interval = 0)
points(20101, 0.1475, pch = 3)
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared), interval = 0)
abline(v=2500, col = "cornflowerblue")
abline(v=2600, col = "cornflowerblue")
which.max(list.JP.Thresh$list.thresholds$df.RSquared[2500:2600,])
which.max(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared[2500:2600,]))
which.max(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[150]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[151]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[149]
mj.plot((list.JP.Thresh$list.thresholds$df.RSquared), interval = 0)
mj.plot((list.JP.Thresh$list.thresholds$df.RSquared[, 1]), interval = 0)
plot(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
mj.plot(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
min(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
which.min(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
list.JP.Thresh$list.thresholds$df.cartesian[149,]
which.max(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared))
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared[1,])
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[1, ]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[1]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[2]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[149]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[150]
which.max(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[140:160])
abline(v=2500, col = "cornflowerblue")
abline(v=2600, col = "cornflowerblue")
which.max(rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[2501:2600])
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[2551]
rowMeans(list.JP.Thresh$list.thresholds$df.RSquared)[2550]
list.JP.Thresh$list.thresholds$df.cartesian[2550,]
q()
